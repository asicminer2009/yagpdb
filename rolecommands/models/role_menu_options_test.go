// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testRoleMenuOptions(t *testing.T) {
	t.Parallel()

	query := RoleMenuOptions(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testRoleMenuOptionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = roleMenuOption.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleMenuOptions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleMenuOptionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = RoleMenuOptions(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := RoleMenuOptions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleMenuOptionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RoleMenuOptionSlice{roleMenuOption}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleMenuOptions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testRoleMenuOptionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := RoleMenuOptionExists(tx, roleMenuOption.ID)
	if err != nil {
		t.Errorf("Unable to check if RoleMenuOption exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoleMenuOptionExistsG to return true, but got false.")
	}
}
func testRoleMenuOptionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx); err != nil {
		t.Error(err)
	}

	roleMenuOptionFound, err := FindRoleMenuOption(tx, roleMenuOption.ID)
	if err != nil {
		t.Error(err)
	}

	if roleMenuOptionFound == nil {
		t.Error("want a record, got nil")
	}
}
func testRoleMenuOptionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = RoleMenuOptions(tx).Bind(roleMenuOption); err != nil {
		t.Error(err)
	}
}

func testRoleMenuOptionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := RoleMenuOptions(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoleMenuOptionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOptionOne := &RoleMenuOption{}
	roleMenuOptionTwo := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOptionOne, roleMenuOptionDBTypes, false, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}
	if err = randomize.Struct(seed, roleMenuOptionTwo, roleMenuOptionDBTypes, false, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOptionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = roleMenuOptionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := RoleMenuOptions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoleMenuOptionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roleMenuOptionOne := &RoleMenuOption{}
	roleMenuOptionTwo := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOptionOne, roleMenuOptionDBTypes, false, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}
	if err = randomize.Struct(seed, roleMenuOptionTwo, roleMenuOptionDBTypes, false, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOptionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = roleMenuOptionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleMenuOptions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testRoleMenuOptionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleMenuOptions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleMenuOptionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx, roleMenuOptionColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := RoleMenuOptions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleMenuOptionToOneRoleCommandUsingRoleCommand(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local RoleMenuOption
	var foreign RoleCommand

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleCommandDBTypes, false, roleCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleCommand struct: %s", err)
	}

	local.RoleCommandID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.RoleCommandID.Int64 = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.RoleCommand(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoleMenuOptionSlice{&local}
	if err = local.L.LoadRoleCommand(tx, false, (*[]*RoleMenuOption)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.RoleCommand == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RoleCommand = nil
	if err = local.L.LoadRoleCommand(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.RoleCommand == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoleMenuOptionToOneRoleMenuUsingRoleMenu(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local RoleMenuOption
	var foreign RoleMenu

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleMenuOptionDBTypes, false, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleMenuDBTypes, false, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.RoleMenuID = foreign.MessageID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.RoleMenu(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.MessageID != foreign.MessageID {
		t.Errorf("want: %v, got %v", foreign.MessageID, check.MessageID)
	}

	slice := RoleMenuOptionSlice{&local}
	if err = local.L.LoadRoleMenu(tx, false, (*[]*RoleMenuOption)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.RoleMenu == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RoleMenu = nil
	if err = local.L.LoadRoleMenu(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.RoleMenu == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoleMenuOptionToOneSetOpRoleCommandUsingRoleCommand(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleMenuOption
	var b, c RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuOptionDBTypes, false, strmangle.SetComplement(roleMenuOptionPrimaryKeyColumns, roleMenuOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RoleCommand{&b, &c} {
		err = a.SetRoleCommand(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RoleCommand != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoleMenuOptions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RoleCommandID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.RoleCommandID.Int64)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoleCommandID.Int64))
		reflect.Indirect(reflect.ValueOf(&a.RoleCommandID.Int64)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RoleCommandID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.RoleCommandID.Int64, x.ID)
		}
	}
}

func testRoleMenuOptionToOneRemoveOpRoleCommandUsingRoleCommand(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleMenuOption
	var b RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuOptionDBTypes, false, strmangle.SetComplement(roleMenuOptionPrimaryKeyColumns, roleMenuOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRoleCommand(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRoleCommand(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.RoleCommand(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.RoleCommand != nil {
		t.Error("R struct entry should be nil")
	}

	if a.RoleCommandID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RoleMenuOptions) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRoleMenuOptionToOneSetOpRoleMenuUsingRoleMenu(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleMenuOption
	var b, c RoleMenu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuOptionDBTypes, false, strmangle.SetComplement(roleMenuOptionPrimaryKeyColumns, roleMenuOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RoleMenu{&b, &c} {
		err = a.SetRoleMenu(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RoleMenu != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoleMenuOptions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RoleMenuID != x.MessageID {
			t.Error("foreign key was wrong value", a.RoleMenuID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoleMenuID))
		reflect.Indirect(reflect.ValueOf(&a.RoleMenuID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RoleMenuID != x.MessageID {
			t.Error("foreign key was wrong value", a.RoleMenuID, x.MessageID)
		}
	}
}
func testRoleMenuOptionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = roleMenuOption.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testRoleMenuOptionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RoleMenuOptionSlice{roleMenuOption}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testRoleMenuOptionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := RoleMenuOptions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roleMenuOptionDBTypes = map[string]string{`EmojiID`: `bigint`, `ID`: `bigint`, `RoleCommandID`: `bigint`, `RoleMenuID`: `bigint`, `UnicodeEmoji`: `text`}
	_                     = bytes.MinRead
)

func testRoleMenuOptionsUpdate(t *testing.T) {
	t.Parallel()

	if len(roleMenuOptionColumns) == len(roleMenuOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleMenuOptions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	if err = roleMenuOption.Update(tx); err != nil {
		t.Error(err)
	}
}

func testRoleMenuOptionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roleMenuOptionColumns) == len(roleMenuOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	roleMenuOption := &RoleMenuOption{}
	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleMenuOptions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, roleMenuOption, roleMenuOptionDBTypes, true, roleMenuOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roleMenuOptionColumns, roleMenuOptionPrimaryKeyColumns) {
		fields = roleMenuOptionColumns
	} else {
		fields = strmangle.SetComplement(
			roleMenuOptionColumns,
			roleMenuOptionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(roleMenuOption))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := RoleMenuOptionSlice{roleMenuOption}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testRoleMenuOptionsUpsert(t *testing.T) {
	t.Parallel()

	if len(roleMenuOptionColumns) == len(roleMenuOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	roleMenuOption := RoleMenuOption{}
	if err = randomize.Struct(seed, &roleMenuOption, roleMenuOptionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOption.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert RoleMenuOption: %s", err)
	}

	count, err := RoleMenuOptions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &roleMenuOption, roleMenuOptionDBTypes, false, roleMenuOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	if err = roleMenuOption.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert RoleMenuOption: %s", err)
	}

	count, err = RoleMenuOptions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
