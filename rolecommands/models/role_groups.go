// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// RoleGroup is an object representing the database table.
type RoleGroup struct {
	ID                  int64            `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildID             int64            `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	Name                string           `boil:"name" json:"name" toml:"name" yaml:"name"`
	RequireRoles        types.Int64Array `boil:"require_roles" json:"require_roles,omitempty" toml:"require_roles" yaml:"require_roles,omitempty"`
	IgnoreRoles         types.Int64Array `boil:"ignore_roles" json:"ignore_roles,omitempty" toml:"ignore_roles" yaml:"ignore_roles,omitempty"`
	Mode                int64            `boil:"mode" json:"mode" toml:"mode" yaml:"mode"`
	MultipleMax         int64            `boil:"multiple_max" json:"multiple_max" toml:"multiple_max" yaml:"multiple_max"`
	MultipleMin         int64            `boil:"multiple_min" json:"multiple_min" toml:"multiple_min" yaml:"multiple_min"`
	SingleAutoToggleOff bool             `boil:"single_auto_toggle_off" json:"single_auto_toggle_off" toml:"single_auto_toggle_off" yaml:"single_auto_toggle_off"`
	SingleRequireOne    bool             `boil:"single_require_one" json:"single_require_one" toml:"single_require_one" yaml:"single_require_one"`

	R *roleGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleGroupColumns = struct {
	ID                  string
	GuildID             string
	Name                string
	RequireRoles        string
	IgnoreRoles         string
	Mode                string
	MultipleMax         string
	MultipleMin         string
	SingleAutoToggleOff string
	SingleRequireOne    string
}{
	ID:                  "id",
	GuildID:             "guild_id",
	Name:                "name",
	RequireRoles:        "require_roles",
	IgnoreRoles:         "ignore_roles",
	Mode:                "mode",
	MultipleMax:         "multiple_max",
	MultipleMin:         "multiple_min",
	SingleAutoToggleOff: "single_auto_toggle_off",
	SingleRequireOne:    "single_require_one",
}

// roleGroupR is where relationships are stored.
type roleGroupR struct {
	RoleCommands RoleCommandSlice
	RoleMenus    RoleMenuSlice
}

// roleGroupL is where Load methods for each relationship are stored.
type roleGroupL struct{}

var (
	roleGroupColumns               = []string{"id", "guild_id", "name", "require_roles", "ignore_roles", "mode", "multiple_max", "multiple_min", "single_auto_toggle_off", "single_require_one"}
	roleGroupColumnsWithoutDefault = []string{"guild_id", "name", "require_roles", "ignore_roles", "mode", "multiple_max", "multiple_min", "single_auto_toggle_off", "single_require_one"}
	roleGroupColumnsWithDefault    = []string{"id"}
	roleGroupPrimaryKeyColumns     = []string{"id"}
)

type (
	// RoleGroupSlice is an alias for a slice of pointers to RoleGroup.
	// This should generally be used opposed to []RoleGroup.
	RoleGroupSlice []*RoleGroup

	roleGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleGroupType                 = reflect.TypeOf(&RoleGroup{})
	roleGroupMapping              = queries.MakeStructMapping(roleGroupType)
	roleGroupPrimaryKeyMapping, _ = queries.BindMapping(roleGroupType, roleGroupMapping, roleGroupPrimaryKeyColumns)
	roleGroupInsertCacheMut       sync.RWMutex
	roleGroupInsertCache          = make(map[string]insertCache)
	roleGroupUpdateCacheMut       sync.RWMutex
	roleGroupUpdateCache          = make(map[string]updateCache)
	roleGroupUpsertCacheMut       sync.RWMutex
	roleGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single roleGroup record from the query, and panics on error.
func (q roleGroupQuery) OneP() *RoleGroup {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single roleGroup record from the query.
func (q roleGroupQuery) One() (*RoleGroup, error) {
	o := &RoleGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_groups")
	}

	return o, nil
}

// AllP returns all RoleGroup records from the query, and panics on error.
func (q roleGroupQuery) AllP() RoleGroupSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all RoleGroup records from the query.
func (q roleGroupQuery) All() (RoleGroupSlice, error) {
	var o []*RoleGroup

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleGroup slice")
	}

	return o, nil
}

// CountP returns the count of all RoleGroup records in the query, and panics on error.
func (q roleGroupQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all RoleGroup records in the query.
func (q roleGroupQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_groups rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q roleGroupQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q roleGroupQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_groups exists")
	}

	return count > 0, nil
}

// RoleCommandsG retrieves all the role_command's role commands.
func (o *RoleGroup) RoleCommandsG(mods ...qm.QueryMod) roleCommandQuery {
	return o.RoleCommands(boil.GetDB(), mods...)
}

// RoleCommands retrieves all the role_command's role commands with an executor.
func (o *RoleGroup) RoleCommands(exec boil.Executor, mods ...qm.QueryMod) roleCommandQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_commands\".\"role_group_id\"=?", o.ID),
	)

	query := RoleCommands(exec, queryMods...)
	queries.SetFrom(query.Query, "\"role_commands\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"role_commands\".*"})
	}

	return query
}

// RoleMenusG retrieves all the role_menu's role menus.
func (o *RoleGroup) RoleMenusG(mods ...qm.QueryMod) roleMenuQuery {
	return o.RoleMenus(boil.GetDB(), mods...)
}

// RoleMenus retrieves all the role_menu's role menus with an executor.
func (o *RoleGroup) RoleMenus(exec boil.Executor, mods ...qm.QueryMod) roleMenuQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_menus\".\"role_group_id\"=?", o.ID),
	)

	query := RoleMenus(exec, queryMods...)
	queries.SetFrom(query.Query, "\"role_menus\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"role_menus\".*"})
	}

	return query
}

// LoadRoleCommands allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (roleGroupL) LoadRoleCommands(e boil.Executor, singular bool, maybeRoleGroup interface{}) error {
	var slice []*RoleGroup
	var object *RoleGroup

	count := 1
	if singular {
		object = maybeRoleGroup.(*RoleGroup)
	} else {
		slice = *maybeRoleGroup.(*[]*RoleGroup)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &roleGroupR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &roleGroupR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"role_commands\" where \"role_group_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_commands")
	}
	defer results.Close()

	var resultSlice []*RoleCommand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_commands")
	}

	if singular {
		object.R.RoleCommands = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RoleGroupID.Int64 {
				local.R.RoleCommands = append(local.R.RoleCommands, foreign)
				break
			}
		}
	}

	return nil
}

// LoadRoleMenus allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (roleGroupL) LoadRoleMenus(e boil.Executor, singular bool, maybeRoleGroup interface{}) error {
	var slice []*RoleGroup
	var object *RoleGroup

	count := 1
	if singular {
		object = maybeRoleGroup.(*RoleGroup)
	} else {
		slice = *maybeRoleGroup.(*[]*RoleGroup)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &roleGroupR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &roleGroupR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"role_menus\" where \"role_group_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_menus")
	}
	defer results.Close()

	var resultSlice []*RoleMenu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_menus")
	}

	if singular {
		object.R.RoleMenus = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RoleGroupID.Int64 {
				local.R.RoleMenus = append(local.R.RoleMenus, foreign)
				break
			}
		}
	}

	return nil
}

// AddRoleCommandsG adds the given related objects to the existing relationships
// of the role_group, optionally inserting them as new records.
// Appends related to o.R.RoleCommands.
// Sets related.R.RoleGroup appropriately.
// Uses the global database handle.
func (o *RoleGroup) AddRoleCommandsG(insert bool, related ...*RoleCommand) error {
	return o.AddRoleCommands(boil.GetDB(), insert, related...)
}

// AddRoleCommandsP adds the given related objects to the existing relationships
// of the role_group, optionally inserting them as new records.
// Appends related to o.R.RoleCommands.
// Sets related.R.RoleGroup appropriately.
// Panics on error.
func (o *RoleGroup) AddRoleCommandsP(exec boil.Executor, insert bool, related ...*RoleCommand) {
	if err := o.AddRoleCommands(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRoleCommandsGP adds the given related objects to the existing relationships
// of the role_group, optionally inserting them as new records.
// Appends related to o.R.RoleCommands.
// Sets related.R.RoleGroup appropriately.
// Uses the global database handle and panics on error.
func (o *RoleGroup) AddRoleCommandsGP(insert bool, related ...*RoleCommand) {
	if err := o.AddRoleCommands(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRoleCommands adds the given related objects to the existing relationships
// of the role_group, optionally inserting them as new records.
// Appends related to o.R.RoleCommands.
// Sets related.R.RoleGroup appropriately.
func (o *RoleGroup) AddRoleCommands(exec boil.Executor, insert bool, related ...*RoleCommand) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RoleGroupID.Int64 = o.ID
			rel.RoleGroupID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_commands\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"role_group_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleCommandPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RoleGroupID.Int64 = o.ID
			rel.RoleGroupID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &roleGroupR{
			RoleCommands: related,
		}
	} else {
		o.R.RoleCommands = append(o.R.RoleCommands, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleCommandR{
				RoleGroup: o,
			}
		} else {
			rel.R.RoleGroup = o
		}
	}
	return nil
}

// SetRoleCommandsG removes all previously related items of the
// role_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleGroup's RoleCommands accordingly.
// Replaces o.R.RoleCommands with related.
// Sets related.R.RoleGroup's RoleCommands accordingly.
// Uses the global database handle.
func (o *RoleGroup) SetRoleCommandsG(insert bool, related ...*RoleCommand) error {
	return o.SetRoleCommands(boil.GetDB(), insert, related...)
}

// SetRoleCommandsP removes all previously related items of the
// role_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleGroup's RoleCommands accordingly.
// Replaces o.R.RoleCommands with related.
// Sets related.R.RoleGroup's RoleCommands accordingly.
// Panics on error.
func (o *RoleGroup) SetRoleCommandsP(exec boil.Executor, insert bool, related ...*RoleCommand) {
	if err := o.SetRoleCommands(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleCommandsGP removes all previously related items of the
// role_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleGroup's RoleCommands accordingly.
// Replaces o.R.RoleCommands with related.
// Sets related.R.RoleGroup's RoleCommands accordingly.
// Uses the global database handle and panics on error.
func (o *RoleGroup) SetRoleCommandsGP(insert bool, related ...*RoleCommand) {
	if err := o.SetRoleCommands(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleCommands removes all previously related items of the
// role_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleGroup's RoleCommands accordingly.
// Replaces o.R.RoleCommands with related.
// Sets related.R.RoleGroup's RoleCommands accordingly.
func (o *RoleGroup) SetRoleCommands(exec boil.Executor, insert bool, related ...*RoleCommand) error {
	query := "update \"role_commands\" set \"role_group_id\" = null where \"role_group_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoleCommands {
			rel.RoleGroupID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.RoleGroup = nil
		}

		o.R.RoleCommands = nil
	}
	return o.AddRoleCommands(exec, insert, related...)
}

// RemoveRoleCommandsG relationships from objects passed in.
// Removes related items from R.RoleCommands (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleGroup.
// Uses the global database handle.
func (o *RoleGroup) RemoveRoleCommandsG(related ...*RoleCommand) error {
	return o.RemoveRoleCommands(boil.GetDB(), related...)
}

// RemoveRoleCommandsP relationships from objects passed in.
// Removes related items from R.RoleCommands (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleGroup.
// Panics on error.
func (o *RoleGroup) RemoveRoleCommandsP(exec boil.Executor, related ...*RoleCommand) {
	if err := o.RemoveRoleCommands(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoleCommandsGP relationships from objects passed in.
// Removes related items from R.RoleCommands (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleGroup.
// Uses the global database handle and panics on error.
func (o *RoleGroup) RemoveRoleCommandsGP(related ...*RoleCommand) {
	if err := o.RemoveRoleCommands(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoleCommands relationships from objects passed in.
// Removes related items from R.RoleCommands (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleGroup.
func (o *RoleGroup) RemoveRoleCommands(exec boil.Executor, related ...*RoleCommand) error {
	var err error
	for _, rel := range related {
		rel.RoleGroupID.Valid = false
		if rel.R != nil {
			rel.R.RoleGroup = nil
		}
		if err = rel.Update(exec, "role_group_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoleCommands {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoleCommands)
			if ln > 1 && i < ln-1 {
				o.R.RoleCommands[i] = o.R.RoleCommands[ln-1]
			}
			o.R.RoleCommands = o.R.RoleCommands[:ln-1]
			break
		}
	}

	return nil
}

// AddRoleMenusG adds the given related objects to the existing relationships
// of the role_group, optionally inserting them as new records.
// Appends related to o.R.RoleMenus.
// Sets related.R.RoleGroup appropriately.
// Uses the global database handle.
func (o *RoleGroup) AddRoleMenusG(insert bool, related ...*RoleMenu) error {
	return o.AddRoleMenus(boil.GetDB(), insert, related...)
}

// AddRoleMenusP adds the given related objects to the existing relationships
// of the role_group, optionally inserting them as new records.
// Appends related to o.R.RoleMenus.
// Sets related.R.RoleGroup appropriately.
// Panics on error.
func (o *RoleGroup) AddRoleMenusP(exec boil.Executor, insert bool, related ...*RoleMenu) {
	if err := o.AddRoleMenus(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRoleMenusGP adds the given related objects to the existing relationships
// of the role_group, optionally inserting them as new records.
// Appends related to o.R.RoleMenus.
// Sets related.R.RoleGroup appropriately.
// Uses the global database handle and panics on error.
func (o *RoleGroup) AddRoleMenusGP(insert bool, related ...*RoleMenu) {
	if err := o.AddRoleMenus(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRoleMenus adds the given related objects to the existing relationships
// of the role_group, optionally inserting them as new records.
// Appends related to o.R.RoleMenus.
// Sets related.R.RoleGroup appropriately.
func (o *RoleGroup) AddRoleMenus(exec boil.Executor, insert bool, related ...*RoleMenu) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RoleGroupID.Int64 = o.ID
			rel.RoleGroupID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_menus\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"role_group_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleMenuPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MessageID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RoleGroupID.Int64 = o.ID
			rel.RoleGroupID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &roleGroupR{
			RoleMenus: related,
		}
	} else {
		o.R.RoleMenus = append(o.R.RoleMenus, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleMenuR{
				RoleGroup: o,
			}
		} else {
			rel.R.RoleGroup = o
		}
	}
	return nil
}

// SetRoleMenusG removes all previously related items of the
// role_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleGroup's RoleMenus accordingly.
// Replaces o.R.RoleMenus with related.
// Sets related.R.RoleGroup's RoleMenus accordingly.
// Uses the global database handle.
func (o *RoleGroup) SetRoleMenusG(insert bool, related ...*RoleMenu) error {
	return o.SetRoleMenus(boil.GetDB(), insert, related...)
}

// SetRoleMenusP removes all previously related items of the
// role_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleGroup's RoleMenus accordingly.
// Replaces o.R.RoleMenus with related.
// Sets related.R.RoleGroup's RoleMenus accordingly.
// Panics on error.
func (o *RoleGroup) SetRoleMenusP(exec boil.Executor, insert bool, related ...*RoleMenu) {
	if err := o.SetRoleMenus(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleMenusGP removes all previously related items of the
// role_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleGroup's RoleMenus accordingly.
// Replaces o.R.RoleMenus with related.
// Sets related.R.RoleGroup's RoleMenus accordingly.
// Uses the global database handle and panics on error.
func (o *RoleGroup) SetRoleMenusGP(insert bool, related ...*RoleMenu) {
	if err := o.SetRoleMenus(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleMenus removes all previously related items of the
// role_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleGroup's RoleMenus accordingly.
// Replaces o.R.RoleMenus with related.
// Sets related.R.RoleGroup's RoleMenus accordingly.
func (o *RoleGroup) SetRoleMenus(exec boil.Executor, insert bool, related ...*RoleMenu) error {
	query := "update \"role_menus\" set \"role_group_id\" = null where \"role_group_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoleMenus {
			rel.RoleGroupID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.RoleGroup = nil
		}

		o.R.RoleMenus = nil
	}
	return o.AddRoleMenus(exec, insert, related...)
}

// RemoveRoleMenusG relationships from objects passed in.
// Removes related items from R.RoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleGroup.
// Uses the global database handle.
func (o *RoleGroup) RemoveRoleMenusG(related ...*RoleMenu) error {
	return o.RemoveRoleMenus(boil.GetDB(), related...)
}

// RemoveRoleMenusP relationships from objects passed in.
// Removes related items from R.RoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleGroup.
// Panics on error.
func (o *RoleGroup) RemoveRoleMenusP(exec boil.Executor, related ...*RoleMenu) {
	if err := o.RemoveRoleMenus(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoleMenusGP relationships from objects passed in.
// Removes related items from R.RoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleGroup.
// Uses the global database handle and panics on error.
func (o *RoleGroup) RemoveRoleMenusGP(related ...*RoleMenu) {
	if err := o.RemoveRoleMenus(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoleMenus relationships from objects passed in.
// Removes related items from R.RoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleGroup.
func (o *RoleGroup) RemoveRoleMenus(exec boil.Executor, related ...*RoleMenu) error {
	var err error
	for _, rel := range related {
		rel.RoleGroupID.Valid = false
		if rel.R != nil {
			rel.R.RoleGroup = nil
		}
		if err = rel.Update(exec, "role_group_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoleMenus {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoleMenus)
			if ln > 1 && i < ln-1 {
				o.R.RoleMenus[i] = o.R.RoleMenus[ln-1]
			}
			o.R.RoleMenus = o.R.RoleMenus[:ln-1]
			break
		}
	}

	return nil
}

// RoleGroupsG retrieves all records.
func RoleGroupsG(mods ...qm.QueryMod) roleGroupQuery {
	return RoleGroups(boil.GetDB(), mods...)
}

// RoleGroups retrieves all the records using an executor.
func RoleGroups(exec boil.Executor, mods ...qm.QueryMod) roleGroupQuery {
	mods = append(mods, qm.From("\"role_groups\""))
	return roleGroupQuery{NewQuery(exec, mods...)}
}

// FindRoleGroupG retrieves a single record by ID.
func FindRoleGroupG(id int64, selectCols ...string) (*RoleGroup, error) {
	return FindRoleGroup(boil.GetDB(), id, selectCols...)
}

// FindRoleGroupGP retrieves a single record by ID, and panics on error.
func FindRoleGroupGP(id int64, selectCols ...string) *RoleGroup {
	retobj, err := FindRoleGroup(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRoleGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleGroup(exec boil.Executor, id int64, selectCols ...string) (*RoleGroup, error) {
	roleGroupObj := &RoleGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_groups\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(roleGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from role_groups")
	}

	return roleGroupObj, nil
}

// FindRoleGroupP retrieves a single record by ID with an executor, and panics on error.
func FindRoleGroupP(exec boil.Executor, id int64, selectCols ...string) *RoleGroup {
	retobj, err := FindRoleGroup(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RoleGroup) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *RoleGroup) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *RoleGroup) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *RoleGroup) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no role_groups provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(roleGroupColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	roleGroupInsertCacheMut.RLock()
	cache, cached := roleGroupInsertCache[key]
	roleGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			roleGroupColumns,
			roleGroupColumnsWithDefault,
			roleGroupColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(roleGroupType, roleGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleGroupType, roleGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_groups\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_groups\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_groups")
	}

	if !cached {
		roleGroupInsertCacheMut.Lock()
		roleGroupInsertCache[key] = cache
		roleGroupInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single RoleGroup record. See Update for
// whitelist behavior description.
func (o *RoleGroup) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single RoleGroup record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *RoleGroup) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the RoleGroup, and panics on error.
// See Update for whitelist behavior description.
func (o *RoleGroup) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the RoleGroup.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *RoleGroup) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	roleGroupUpdateCacheMut.RLock()
	cache, cached := roleGroupUpdateCache[key]
	roleGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			roleGroupColumns,
			roleGroupPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update role_groups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_groups\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roleGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleGroupType, roleGroupMapping, append(wl, roleGroupPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update role_groups row")
	}

	if !cached {
		roleGroupUpdateCacheMut.Lock()
		roleGroupUpdateCache[key] = cache
		roleGroupUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q roleGroupQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q roleGroupQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for role_groups")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoleGroupSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o RoleGroupSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RoleGroupSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleGroupSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roleGroupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in roleGroup slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RoleGroup) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *RoleGroup) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *RoleGroup) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *RoleGroup) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no role_groups provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(roleGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleGroupUpsertCacheMut.RLock()
	cache, cached := roleGroupUpsertCache[key]
	roleGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			roleGroupColumns,
			roleGroupColumnsWithDefault,
			roleGroupColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			roleGroupColumns,
			roleGroupPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert role_groups, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roleGroupPrimaryKeyColumns))
			copy(conflict, roleGroupPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"role_groups\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roleGroupType, roleGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleGroupType, roleGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert role_groups")
	}

	if !cached {
		roleGroupUpsertCacheMut.Lock()
		roleGroupUpsertCache[key] = cache
		roleGroupUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single RoleGroup record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *RoleGroup) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single RoleGroup record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RoleGroup) DeleteG() error {
	if o == nil {
		return errors.New("models: no RoleGroup provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single RoleGroup record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *RoleGroup) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single RoleGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleGroup) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no RoleGroup provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"role_groups\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from role_groups")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q roleGroupQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q roleGroupQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no roleGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from role_groups")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o RoleGroupSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o RoleGroupSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no RoleGroup slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RoleGroupSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleGroupSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no RoleGroup slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleGroupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from roleGroup slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *RoleGroup) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *RoleGroup) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RoleGroup) ReloadG() error {
	if o == nil {
		return errors.New("models: no RoleGroup provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleGroup) Reload(exec boil.Executor) error {
	ret, err := FindRoleGroup(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RoleGroupSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RoleGroupSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleGroupSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty RoleGroupSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleGroupSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	roleGroups := RoleGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_groups\".* FROM \"role_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&roleGroups)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleGroupSlice")
	}

	*o = roleGroups

	return nil
}

// RoleGroupExists checks if the RoleGroup row exists.
func RoleGroupExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_groups\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_groups exists")
	}

	return exists, nil
}

// RoleGroupExistsG checks if the RoleGroup row exists.
func RoleGroupExistsG(id int64) (bool, error) {
	return RoleGroupExists(boil.GetDB(), id)
}

// RoleGroupExistsGP checks if the RoleGroup row exists. Panics on error.
func RoleGroupExistsGP(id int64) bool {
	e, err := RoleGroupExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RoleGroupExistsP checks if the RoleGroup row exists. Panics on error.
func RoleGroupExistsP(exec boil.Executor, id int64) bool {
	e, err := RoleGroupExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
