// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRoleGroups(t *testing.T) {
	t.Parallel()

	query := RoleGroups()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoleGroupsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleGroupsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RoleGroups().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleGroupsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleGroupSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleGroupsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RoleGroupExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RoleGroup exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoleGroupExists to return true, but got false.")
	}
}

func testRoleGroupsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	roleGroupFound, err := FindRoleGroup(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if roleGroupFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoleGroupsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RoleGroups().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoleGroupsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RoleGroups().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoleGroupsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroupOne := &RoleGroup{}
	roleGroupTwo := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroupOne, roleGroupDBTypes, false, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, roleGroupTwo, roleGroupDBTypes, false, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoleGroupsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roleGroupOne := &RoleGroup{}
	roleGroupTwo := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroupOne, roleGroupDBTypes, false, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, roleGroupTwo, roleGroupDBTypes, false, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testRoleGroupsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleGroupsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(roleGroupColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RoleGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleGroupToManyRoleCommands(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleGroup
	var b, c RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, roleCommandDBTypes, false, roleCommandColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleCommandDBTypes, false, roleCommandColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RoleGroupID, a.ID)
	queries.Assign(&c.RoleGroupID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RoleCommands().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.RoleGroupID, b.RoleGroupID) {
			bFound = true
		}
		if queries.Equal(v.RoleGroupID, c.RoleGroupID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoleGroupSlice{&a}
	if err = a.L.LoadRoleCommands(ctx, tx, false, (*[]*RoleGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleCommands); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoleCommands = nil
	if err = a.L.LoadRoleCommands(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleCommands); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRoleGroupToManyRoleMenus(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleGroup
	var b, c RoleMenu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, roleMenuDBTypes, false, roleMenuColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleMenuDBTypes, false, roleMenuColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RoleGroupID, a.ID)
	queries.Assign(&c.RoleGroupID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RoleMenus().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.RoleGroupID, b.RoleGroupID) {
			bFound = true
		}
		if queries.Equal(v.RoleGroupID, c.RoleGroupID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoleGroupSlice{&a}
	if err = a.L.LoadRoleMenus(ctx, tx, false, (*[]*RoleGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleMenus); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoleMenus = nil
	if err = a.L.LoadRoleMenus(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleMenus); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRoleGroupToManyAddOpRoleCommands(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleGroup
	var b, c, d, e RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleCommand{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RoleCommand{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoleCommands(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.RoleGroupID) {
			t.Error("foreign key was wrong value", a.ID, first.RoleGroupID)
		}
		if !queries.Equal(a.ID, second.RoleGroupID) {
			t.Error("foreign key was wrong value", a.ID, second.RoleGroupID)
		}

		if first.R.RoleGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.RoleGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoleCommands[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoleCommands[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoleCommands().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRoleGroupToManySetOpRoleCommands(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleGroup
	var b, c, d, e RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleCommand{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRoleCommands(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoleCommands().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRoleCommands(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoleCommands().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RoleGroupID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RoleGroupID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.RoleGroupID) {
		t.Error("foreign key was wrong value", a.ID, d.RoleGroupID)
	}
	if !queries.Equal(a.ID, e.RoleGroupID) {
		t.Error("foreign key was wrong value", a.ID, e.RoleGroupID)
	}

	if b.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.RoleGroup != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.RoleGroup != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RoleCommands[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RoleCommands[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRoleGroupToManyRemoveOpRoleCommands(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleGroup
	var b, c, d, e RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleCommand{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRoleCommands(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoleCommands().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRoleCommands(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoleCommands().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RoleGroupID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RoleGroupID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.RoleGroup != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.RoleGroup != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RoleCommands) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RoleCommands[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RoleCommands[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRoleGroupToManyAddOpRoleMenus(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleGroup
	var b, c, d, e RoleMenu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleMenu{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RoleMenu{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoleMenus(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.RoleGroupID) {
			t.Error("foreign key was wrong value", a.ID, first.RoleGroupID)
		}
		if !queries.Equal(a.ID, second.RoleGroupID) {
			t.Error("foreign key was wrong value", a.ID, second.RoleGroupID)
		}

		if first.R.RoleGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.RoleGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoleMenus[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoleMenus[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoleMenus().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRoleGroupToManySetOpRoleMenus(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleGroup
	var b, c, d, e RoleMenu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleMenu{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRoleMenus(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRoleMenus(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RoleGroupID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RoleGroupID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.RoleGroupID) {
		t.Error("foreign key was wrong value", a.ID, d.RoleGroupID)
	}
	if !queries.Equal(a.ID, e.RoleGroupID) {
		t.Error("foreign key was wrong value", a.ID, e.RoleGroupID)
	}

	if b.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.RoleGroup != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.RoleGroup != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RoleMenus[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RoleMenus[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRoleGroupToManyRemoveOpRoleMenus(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleGroup
	var b, c, d, e RoleMenu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleMenu{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRoleMenus(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRoleMenus(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RoleGroupID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RoleGroupID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.RoleGroup != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.RoleGroup != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RoleMenus) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RoleMenus[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RoleMenus[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRoleGroupsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleGroupsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleGroupSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleGroupsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roleGroupDBTypes = map[string]string{`ID`: `bigint`, `GuildID`: `bigint`, `Name`: `text`, `RequireRoles`: `ARRAYbigint`, `IgnoreRoles`: `ARRAYbigint`, `Mode`: `bigint`, `MultipleMax`: `bigint`, `MultipleMin`: `bigint`, `SingleAutoToggleOff`: `boolean`, `SingleRequireOne`: `boolean`, `TemporaryRoleDuration`: `integer`}
	_                = bytes.MinRead
)

func testRoleGroupsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(roleGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(roleGroupColumns) == len(roleGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoleGroupsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roleGroupColumns) == len(roleGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleGroup{}
	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleGroupDBTypes, true, roleGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roleGroupColumns, roleGroupPrimaryKeyColumns) {
		fields = roleGroupColumns
	} else {
		fields = strmangle.SetComplement(
			roleGroupColumns,
			roleGroupPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RoleGroupSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoleGroupsUpsert(t *testing.T) {
	t.Parallel()

	if len(roleGroupColumns) == len(roleGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RoleGroup{}
	if err = randomize.Struct(seed, &o, roleGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleGroup: %s", err)
	}

	count, err := RoleGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, roleGroupDBTypes, false, roleGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleGroup: %s", err)
	}

	count, err = RoleGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
