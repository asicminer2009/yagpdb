// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testRoleGroups(t *testing.T) {
	t.Parallel()

	query := RoleGroups(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testRoleGroupsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = roleGroup.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleGroups(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleGroupsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = RoleGroups(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := RoleGroups(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleGroupsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RoleGroupSlice{roleGroup}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleGroups(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testRoleGroupsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := RoleGroupExists(tx, roleGroup.ID)
	if err != nil {
		t.Errorf("Unable to check if RoleGroup exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoleGroupExistsG to return true, but got false.")
	}
}
func testRoleGroupsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx); err != nil {
		t.Error(err)
	}

	roleGroupFound, err := FindRoleGroup(tx, roleGroup.ID)
	if err != nil {
		t.Error(err)
	}

	if roleGroupFound == nil {
		t.Error("want a record, got nil")
	}
}
func testRoleGroupsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = RoleGroups(tx).Bind(roleGroup); err != nil {
		t.Error(err)
	}
}

func testRoleGroupsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := RoleGroups(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoleGroupsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroupOne := &RoleGroup{}
	roleGroupTwo := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroupOne, roleGroupDBTypes, false, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, roleGroupTwo, roleGroupDBTypes, false, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroupOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = roleGroupTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := RoleGroups(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoleGroupsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roleGroupOne := &RoleGroup{}
	roleGroupTwo := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroupOne, roleGroupDBTypes, false, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, roleGroupTwo, roleGroupDBTypes, false, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroupOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = roleGroupTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleGroups(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testRoleGroupsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleGroups(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleGroupsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx, roleGroupColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := RoleGroups(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleGroupToManyRoleCommands(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleGroup
	var b, c RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, roleCommandDBTypes, false, roleCommandColumnsWithDefault...)
	randomize.Struct(seed, &c, roleCommandDBTypes, false, roleCommandColumnsWithDefault...)

	b.RoleGroupID.Valid = true
	c.RoleGroupID.Valid = true
	b.RoleGroupID.Int64 = a.ID
	c.RoleGroupID.Int64 = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	roleCommand, err := a.RoleCommands(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range roleCommand {
		if v.RoleGroupID.Int64 == b.RoleGroupID.Int64 {
			bFound = true
		}
		if v.RoleGroupID.Int64 == c.RoleGroupID.Int64 {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoleGroupSlice{&a}
	if err = a.L.LoadRoleCommands(tx, false, (*[]*RoleGroup)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleCommands); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoleCommands = nil
	if err = a.L.LoadRoleCommands(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleCommands); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", roleCommand)
	}
}

func testRoleGroupToManyRoleMenus(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleGroup
	var b, c RoleMenu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, roleMenuDBTypes, false, roleMenuColumnsWithDefault...)
	randomize.Struct(seed, &c, roleMenuDBTypes, false, roleMenuColumnsWithDefault...)

	b.RoleGroupID.Valid = true
	c.RoleGroupID.Valid = true
	b.RoleGroupID.Int64 = a.ID
	c.RoleGroupID.Int64 = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	roleMenu, err := a.RoleMenus(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range roleMenu {
		if v.RoleGroupID.Int64 == b.RoleGroupID.Int64 {
			bFound = true
		}
		if v.RoleGroupID.Int64 == c.RoleGroupID.Int64 {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoleGroupSlice{&a}
	if err = a.L.LoadRoleMenus(tx, false, (*[]*RoleGroup)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleMenus); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoleMenus = nil
	if err = a.L.LoadRoleMenus(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleMenus); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", roleMenu)
	}
}

func testRoleGroupToManyAddOpRoleCommands(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleGroup
	var b, c, d, e RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleCommand{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RoleCommand{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoleCommands(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RoleGroupID.Int64 {
			t.Error("foreign key was wrong value", a.ID, first.RoleGroupID.Int64)
		}
		if a.ID != second.RoleGroupID.Int64 {
			t.Error("foreign key was wrong value", a.ID, second.RoleGroupID.Int64)
		}

		if first.R.RoleGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.RoleGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoleCommands[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoleCommands[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoleCommands(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRoleGroupToManySetOpRoleCommands(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleGroup
	var b, c, d, e RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleCommand{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetRoleCommands(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoleCommands(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRoleCommands(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoleCommands(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RoleGroupID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RoleGroupID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.RoleGroupID.Int64 {
		t.Error("foreign key was wrong value", a.ID, d.RoleGroupID.Int64)
	}
	if a.ID != e.RoleGroupID.Int64 {
		t.Error("foreign key was wrong value", a.ID, e.RoleGroupID.Int64)
	}

	if b.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.RoleGroup != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.RoleGroup != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RoleCommands[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RoleCommands[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRoleGroupToManyRemoveOpRoleCommands(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleGroup
	var b, c, d, e RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleCommand{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddRoleCommands(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoleCommands(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRoleCommands(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoleCommands(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RoleGroupID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RoleGroupID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.RoleGroup != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.RoleGroup != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RoleCommands) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RoleCommands[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RoleCommands[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRoleGroupToManyAddOpRoleMenus(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleGroup
	var b, c, d, e RoleMenu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleMenu{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RoleMenu{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoleMenus(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RoleGroupID.Int64 {
			t.Error("foreign key was wrong value", a.ID, first.RoleGroupID.Int64)
		}
		if a.ID != second.RoleGroupID.Int64 {
			t.Error("foreign key was wrong value", a.ID, second.RoleGroupID.Int64)
		}

		if first.R.RoleGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.RoleGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoleMenus[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoleMenus[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoleMenus(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRoleGroupToManySetOpRoleMenus(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleGroup
	var b, c, d, e RoleMenu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleMenu{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetRoleMenus(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoleMenus(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRoleMenus(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoleMenus(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RoleGroupID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RoleGroupID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.RoleGroupID.Int64 {
		t.Error("foreign key was wrong value", a.ID, d.RoleGroupID.Int64)
	}
	if a.ID != e.RoleGroupID.Int64 {
		t.Error("foreign key was wrong value", a.ID, e.RoleGroupID.Int64)
	}

	if b.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.RoleGroup != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.RoleGroup != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RoleMenus[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RoleMenus[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRoleGroupToManyRemoveOpRoleMenus(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleGroup
	var b, c, d, e RoleMenu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleMenu{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddRoleMenus(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoleMenus(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRoleMenus(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoleMenus(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RoleGroupID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RoleGroupID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.RoleGroup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.RoleGroup != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.RoleGroup != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RoleMenus) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RoleMenus[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RoleMenus[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRoleGroupsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = roleGroup.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testRoleGroupsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RoleGroupSlice{roleGroup}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testRoleGroupsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := RoleGroups(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roleGroupDBTypes = map[string]string{`GuildID`: `bigint`, `ID`: `bigint`, `IgnoreRoles`: `ARRAYbigint`, `Mode`: `bigint`, `MultipleMax`: `bigint`, `MultipleMin`: `bigint`, `Name`: `text`, `RequireRoles`: `ARRAYbigint`, `SingleAutoToggleOff`: `boolean`, `SingleRequireOne`: `boolean`}
	_                = bytes.MinRead
)

func testRoleGroupsUpdate(t *testing.T) {
	t.Parallel()

	if len(roleGroupColumns) == len(roleGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleGroups(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	if err = roleGroup.Update(tx); err != nil {
		t.Error(err)
	}
}

func testRoleGroupsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roleGroupColumns) == len(roleGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	roleGroup := &RoleGroup{}
	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleGroups(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, roleGroup, roleGroupDBTypes, true, roleGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roleGroupColumns, roleGroupPrimaryKeyColumns) {
		fields = roleGroupColumns
	} else {
		fields = strmangle.SetComplement(
			roleGroupColumns,
			roleGroupPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(roleGroup))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := RoleGroupSlice{roleGroup}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testRoleGroupsUpsert(t *testing.T) {
	t.Parallel()

	if len(roleGroupColumns) == len(roleGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	roleGroup := RoleGroup{}
	if err = randomize.Struct(seed, &roleGroup, roleGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleGroup.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert RoleGroup: %s", err)
	}

	count, err := RoleGroups(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &roleGroup, roleGroupDBTypes, false, roleGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	if err = roleGroup.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert RoleGroup: %s", err)
	}

	count, err = RoleGroups(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
