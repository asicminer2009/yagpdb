// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// RoleMenu is an object representing the database table.
type RoleMenu struct {
	MessageID                  int64      `boil:"message_id" json:"message_id" toml:"message_id" yaml:"message_id"`
	GuildID                    int64      `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	ChannelID                  int64      `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	OwnerID                    int64      `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	OwnMessage                 bool       `boil:"own_message" json:"own_message" toml:"own_message" yaml:"own_message"`
	State                      int64      `boil:"state" json:"state" toml:"state" yaml:"state"`
	NextRoleCommandID          null.Int64 `boil:"next_role_command_id" json:"next_role_command_id,omitempty" toml:"next_role_command_id" yaml:"next_role_command_id,omitempty"`
	RoleGroupID                null.Int64 `boil:"role_group_id" json:"role_group_id,omitempty" toml:"role_group_id" yaml:"role_group_id,omitempty"`
	DisableSendDM              bool       `boil:"disable_send_dm" json:"disable_send_dm" toml:"disable_send_dm" yaml:"disable_send_dm"`
	RemoveRoleOnReactionRemove bool       `boil:"remove_role_on_reaction_remove" json:"remove_role_on_reaction_remove" toml:"remove_role_on_reaction_remove" yaml:"remove_role_on_reaction_remove"`

	R *roleMenuR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleMenuL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleMenuColumns = struct {
	MessageID                  string
	GuildID                    string
	ChannelID                  string
	OwnerID                    string
	OwnMessage                 string
	State                      string
	NextRoleCommandID          string
	RoleGroupID                string
	DisableSendDM              string
	RemoveRoleOnReactionRemove string
}{
	MessageID:                  "message_id",
	GuildID:                    "guild_id",
	ChannelID:                  "channel_id",
	OwnerID:                    "owner_id",
	OwnMessage:                 "own_message",
	State:                      "state",
	NextRoleCommandID:          "next_role_command_id",
	RoleGroupID:                "role_group_id",
	DisableSendDM:              "disable_send_dm",
	RemoveRoleOnReactionRemove: "remove_role_on_reaction_remove",
}

// roleMenuR is where relationships are stored.
type roleMenuR struct {
	NextRoleCommand *RoleCommand
	RoleGroup       *RoleGroup
	RoleMenuOptions RoleMenuOptionSlice
}

// roleMenuL is where Load methods for each relationship are stored.
type roleMenuL struct{}

var (
	roleMenuColumns               = []string{"message_id", "guild_id", "channel_id", "owner_id", "own_message", "state", "next_role_command_id", "role_group_id", "disable_send_dm", "remove_role_on_reaction_remove"}
	roleMenuColumnsWithoutDefault = []string{"message_id", "guild_id", "channel_id", "owner_id", "own_message", "state", "next_role_command_id", "role_group_id"}
	roleMenuColumnsWithDefault    = []string{"disable_send_dm", "remove_role_on_reaction_remove"}
	roleMenuPrimaryKeyColumns     = []string{"message_id"}
)

type (
	// RoleMenuSlice is an alias for a slice of pointers to RoleMenu.
	// This should generally be used opposed to []RoleMenu.
	RoleMenuSlice []*RoleMenu

	roleMenuQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleMenuType                 = reflect.TypeOf(&RoleMenu{})
	roleMenuMapping              = queries.MakeStructMapping(roleMenuType)
	roleMenuPrimaryKeyMapping, _ = queries.BindMapping(roleMenuType, roleMenuMapping, roleMenuPrimaryKeyColumns)
	roleMenuInsertCacheMut       sync.RWMutex
	roleMenuInsertCache          = make(map[string]insertCache)
	roleMenuUpdateCacheMut       sync.RWMutex
	roleMenuUpdateCache          = make(map[string]updateCache)
	roleMenuUpsertCacheMut       sync.RWMutex
	roleMenuUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single roleMenu record from the query, and panics on error.
func (q roleMenuQuery) OneP() *RoleMenu {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single roleMenu record from the query.
func (q roleMenuQuery) One() (*RoleMenu, error) {
	o := &RoleMenu{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_menus")
	}

	return o, nil
}

// AllP returns all RoleMenu records from the query, and panics on error.
func (q roleMenuQuery) AllP() RoleMenuSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all RoleMenu records from the query.
func (q roleMenuQuery) All() (RoleMenuSlice, error) {
	var o []*RoleMenu

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleMenu slice")
	}

	return o, nil
}

// CountP returns the count of all RoleMenu records in the query, and panics on error.
func (q roleMenuQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all RoleMenu records in the query.
func (q roleMenuQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_menus rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q roleMenuQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q roleMenuQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_menus exists")
	}

	return count > 0, nil
}

// NextRoleCommandG pointed to by the foreign key.
func (o *RoleMenu) NextRoleCommandG(mods ...qm.QueryMod) roleCommandQuery {
	return o.NextRoleCommand(boil.GetDB(), mods...)
}

// NextRoleCommand pointed to by the foreign key.
func (o *RoleMenu) NextRoleCommand(exec boil.Executor, mods ...qm.QueryMod) roleCommandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.NextRoleCommandID),
	}

	queryMods = append(queryMods, mods...)

	query := RoleCommands(exec, queryMods...)
	queries.SetFrom(query.Query, "\"role_commands\"")

	return query
}

// RoleGroupG pointed to by the foreign key.
func (o *RoleMenu) RoleGroupG(mods ...qm.QueryMod) roleGroupQuery {
	return o.RoleGroup(boil.GetDB(), mods...)
}

// RoleGroup pointed to by the foreign key.
func (o *RoleMenu) RoleGroup(exec boil.Executor, mods ...qm.QueryMod) roleGroupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RoleGroupID),
	}

	queryMods = append(queryMods, mods...)

	query := RoleGroups(exec, queryMods...)
	queries.SetFrom(query.Query, "\"role_groups\"")

	return query
}

// RoleMenuOptionsG retrieves all the role_menu_option's role menu options.
func (o *RoleMenu) RoleMenuOptionsG(mods ...qm.QueryMod) roleMenuOptionQuery {
	return o.RoleMenuOptions(boil.GetDB(), mods...)
}

// RoleMenuOptions retrieves all the role_menu_option's role menu options with an executor.
func (o *RoleMenu) RoleMenuOptions(exec boil.Executor, mods ...qm.QueryMod) roleMenuOptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_menu_options\".\"role_menu_id\"=?", o.MessageID),
	)

	query := RoleMenuOptions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"role_menu_options\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"role_menu_options\".*"})
	}

	return query
}

// LoadNextRoleCommand allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (roleMenuL) LoadNextRoleCommand(e boil.Executor, singular bool, maybeRoleMenu interface{}) error {
	var slice []*RoleMenu
	var object *RoleMenu

	count := 1
	if singular {
		object = maybeRoleMenu.(*RoleMenu)
	} else {
		slice = *maybeRoleMenu.(*[]*RoleMenu)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &roleMenuR{}
		}
		args[0] = object.NextRoleCommandID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMenuR{}
			}
			args[i] = obj.NextRoleCommandID
		}
	}

	query := fmt.Sprintf(
		"select * from \"role_commands\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RoleCommand")
	}
	defer results.Close()

	var resultSlice []*RoleCommand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RoleCommand")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.NextRoleCommand = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NextRoleCommandID.Int64 == foreign.ID {
				local.R.NextRoleCommand = foreign
				break
			}
		}
	}

	return nil
}

// LoadRoleGroup allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (roleMenuL) LoadRoleGroup(e boil.Executor, singular bool, maybeRoleMenu interface{}) error {
	var slice []*RoleMenu
	var object *RoleMenu

	count := 1
	if singular {
		object = maybeRoleMenu.(*RoleMenu)
	} else {
		slice = *maybeRoleMenu.(*[]*RoleMenu)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &roleMenuR{}
		}
		args[0] = object.RoleGroupID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMenuR{}
			}
			args[i] = obj.RoleGroupID
		}
	}

	query := fmt.Sprintf(
		"select * from \"role_groups\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RoleGroup")
	}
	defer results.Close()

	var resultSlice []*RoleGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RoleGroup")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.RoleGroup = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleGroupID.Int64 == foreign.ID {
				local.R.RoleGroup = foreign
				break
			}
		}
	}

	return nil
}

// LoadRoleMenuOptions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (roleMenuL) LoadRoleMenuOptions(e boil.Executor, singular bool, maybeRoleMenu interface{}) error {
	var slice []*RoleMenu
	var object *RoleMenu

	count := 1
	if singular {
		object = maybeRoleMenu.(*RoleMenu)
	} else {
		slice = *maybeRoleMenu.(*[]*RoleMenu)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &roleMenuR{}
		}
		args[0] = object.MessageID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMenuR{}
			}
			args[i] = obj.MessageID
		}
	}

	query := fmt.Sprintf(
		"select * from \"role_menu_options\" where \"role_menu_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_menu_options")
	}
	defer results.Close()

	var resultSlice []*RoleMenuOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_menu_options")
	}

	if singular {
		object.R.RoleMenuOptions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MessageID == foreign.RoleMenuID {
				local.R.RoleMenuOptions = append(local.R.RoleMenuOptions, foreign)
				break
			}
		}
	}

	return nil
}

// SetNextRoleCommandG of the role_menu to the related item.
// Sets o.R.NextRoleCommand to related.
// Adds o to related.R.NextRoleCommandRoleMenus.
// Uses the global database handle.
func (o *RoleMenu) SetNextRoleCommandG(insert bool, related *RoleCommand) error {
	return o.SetNextRoleCommand(boil.GetDB(), insert, related)
}

// SetNextRoleCommandP of the role_menu to the related item.
// Sets o.R.NextRoleCommand to related.
// Adds o to related.R.NextRoleCommandRoleMenus.
// Panics on error.
func (o *RoleMenu) SetNextRoleCommandP(exec boil.Executor, insert bool, related *RoleCommand) {
	if err := o.SetNextRoleCommand(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNextRoleCommandGP of the role_menu to the related item.
// Sets o.R.NextRoleCommand to related.
// Adds o to related.R.NextRoleCommandRoleMenus.
// Uses the global database handle and panics on error.
func (o *RoleMenu) SetNextRoleCommandGP(insert bool, related *RoleCommand) {
	if err := o.SetNextRoleCommand(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNextRoleCommand of the role_menu to the related item.
// Sets o.R.NextRoleCommand to related.
// Adds o to related.R.NextRoleCommandRoleMenus.
func (o *RoleMenu) SetNextRoleCommand(exec boil.Executor, insert bool, related *RoleCommand) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_menus\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"next_role_command_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleMenuPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MessageID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NextRoleCommandID.Int64 = related.ID
	o.NextRoleCommandID.Valid = true

	if o.R == nil {
		o.R = &roleMenuR{
			NextRoleCommand: related,
		}
	} else {
		o.R.NextRoleCommand = related
	}

	if related.R == nil {
		related.R = &roleCommandR{
			NextRoleCommandRoleMenus: RoleMenuSlice{o},
		}
	} else {
		related.R.NextRoleCommandRoleMenus = append(related.R.NextRoleCommandRoleMenus, o)
	}

	return nil
}

// RemoveNextRoleCommandG relationship.
// Sets o.R.NextRoleCommand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *RoleMenu) RemoveNextRoleCommandG(related *RoleCommand) error {
	return o.RemoveNextRoleCommand(boil.GetDB(), related)
}

// RemoveNextRoleCommandP relationship.
// Sets o.R.NextRoleCommand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *RoleMenu) RemoveNextRoleCommandP(exec boil.Executor, related *RoleCommand) {
	if err := o.RemoveNextRoleCommand(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNextRoleCommandGP relationship.
// Sets o.R.NextRoleCommand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *RoleMenu) RemoveNextRoleCommandGP(related *RoleCommand) {
	if err := o.RemoveNextRoleCommand(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNextRoleCommand relationship.
// Sets o.R.NextRoleCommand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RoleMenu) RemoveNextRoleCommand(exec boil.Executor, related *RoleCommand) error {
	var err error

	o.NextRoleCommandID.Valid = false
	if err = o.Update(exec, "next_role_command_id"); err != nil {
		o.NextRoleCommandID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.NextRoleCommand = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.NextRoleCommandRoleMenus {
		if o.NextRoleCommandID.Int64 != ri.NextRoleCommandID.Int64 {
			continue
		}

		ln := len(related.R.NextRoleCommandRoleMenus)
		if ln > 1 && i < ln-1 {
			related.R.NextRoleCommandRoleMenus[i] = related.R.NextRoleCommandRoleMenus[ln-1]
		}
		related.R.NextRoleCommandRoleMenus = related.R.NextRoleCommandRoleMenus[:ln-1]
		break
	}
	return nil
}

// SetRoleGroupG of the role_menu to the related item.
// Sets o.R.RoleGroup to related.
// Adds o to related.R.RoleMenus.
// Uses the global database handle.
func (o *RoleMenu) SetRoleGroupG(insert bool, related *RoleGroup) error {
	return o.SetRoleGroup(boil.GetDB(), insert, related)
}

// SetRoleGroupP of the role_menu to the related item.
// Sets o.R.RoleGroup to related.
// Adds o to related.R.RoleMenus.
// Panics on error.
func (o *RoleMenu) SetRoleGroupP(exec boil.Executor, insert bool, related *RoleGroup) {
	if err := o.SetRoleGroup(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleGroupGP of the role_menu to the related item.
// Sets o.R.RoleGroup to related.
// Adds o to related.R.RoleMenus.
// Uses the global database handle and panics on error.
func (o *RoleMenu) SetRoleGroupGP(insert bool, related *RoleGroup) {
	if err := o.SetRoleGroup(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleGroup of the role_menu to the related item.
// Sets o.R.RoleGroup to related.
// Adds o to related.R.RoleMenus.
func (o *RoleMenu) SetRoleGroup(exec boil.Executor, insert bool, related *RoleGroup) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_menus\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_group_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleMenuPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MessageID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleGroupID.Int64 = related.ID
	o.RoleGroupID.Valid = true

	if o.R == nil {
		o.R = &roleMenuR{
			RoleGroup: related,
		}
	} else {
		o.R.RoleGroup = related
	}

	if related.R == nil {
		related.R = &roleGroupR{
			RoleMenus: RoleMenuSlice{o},
		}
	} else {
		related.R.RoleMenus = append(related.R.RoleMenus, o)
	}

	return nil
}

// RemoveRoleGroupG relationship.
// Sets o.R.RoleGroup to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *RoleMenu) RemoveRoleGroupG(related *RoleGroup) error {
	return o.RemoveRoleGroup(boil.GetDB(), related)
}

// RemoveRoleGroupP relationship.
// Sets o.R.RoleGroup to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *RoleMenu) RemoveRoleGroupP(exec boil.Executor, related *RoleGroup) {
	if err := o.RemoveRoleGroup(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoleGroupGP relationship.
// Sets o.R.RoleGroup to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *RoleMenu) RemoveRoleGroupGP(related *RoleGroup) {
	if err := o.RemoveRoleGroup(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoleGroup relationship.
// Sets o.R.RoleGroup to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RoleMenu) RemoveRoleGroup(exec boil.Executor, related *RoleGroup) error {
	var err error

	o.RoleGroupID.Valid = false
	if err = o.Update(exec, "role_group_id"); err != nil {
		o.RoleGroupID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.RoleGroup = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RoleMenus {
		if o.RoleGroupID.Int64 != ri.RoleGroupID.Int64 {
			continue
		}

		ln := len(related.R.RoleMenus)
		if ln > 1 && i < ln-1 {
			related.R.RoleMenus[i] = related.R.RoleMenus[ln-1]
		}
		related.R.RoleMenus = related.R.RoleMenus[:ln-1]
		break
	}
	return nil
}

// AddRoleMenuOptionsG adds the given related objects to the existing relationships
// of the role_menu, optionally inserting them as new records.
// Appends related to o.R.RoleMenuOptions.
// Sets related.R.RoleMenu appropriately.
// Uses the global database handle.
func (o *RoleMenu) AddRoleMenuOptionsG(insert bool, related ...*RoleMenuOption) error {
	return o.AddRoleMenuOptions(boil.GetDB(), insert, related...)
}

// AddRoleMenuOptionsP adds the given related objects to the existing relationships
// of the role_menu, optionally inserting them as new records.
// Appends related to o.R.RoleMenuOptions.
// Sets related.R.RoleMenu appropriately.
// Panics on error.
func (o *RoleMenu) AddRoleMenuOptionsP(exec boil.Executor, insert bool, related ...*RoleMenuOption) {
	if err := o.AddRoleMenuOptions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRoleMenuOptionsGP adds the given related objects to the existing relationships
// of the role_menu, optionally inserting them as new records.
// Appends related to o.R.RoleMenuOptions.
// Sets related.R.RoleMenu appropriately.
// Uses the global database handle and panics on error.
func (o *RoleMenu) AddRoleMenuOptionsGP(insert bool, related ...*RoleMenuOption) {
	if err := o.AddRoleMenuOptions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRoleMenuOptions adds the given related objects to the existing relationships
// of the role_menu, optionally inserting them as new records.
// Appends related to o.R.RoleMenuOptions.
// Sets related.R.RoleMenu appropriately.
func (o *RoleMenu) AddRoleMenuOptions(exec boil.Executor, insert bool, related ...*RoleMenuOption) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RoleMenuID = o.MessageID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_menu_options\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"role_menu_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleMenuOptionPrimaryKeyColumns),
			)
			values := []interface{}{o.MessageID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RoleMenuID = o.MessageID
		}
	}

	if o.R == nil {
		o.R = &roleMenuR{
			RoleMenuOptions: related,
		}
	} else {
		o.R.RoleMenuOptions = append(o.R.RoleMenuOptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleMenuOptionR{
				RoleMenu: o,
			}
		} else {
			rel.R.RoleMenu = o
		}
	}
	return nil
}

// RoleMenusG retrieves all records.
func RoleMenusG(mods ...qm.QueryMod) roleMenuQuery {
	return RoleMenus(boil.GetDB(), mods...)
}

// RoleMenus retrieves all the records using an executor.
func RoleMenus(exec boil.Executor, mods ...qm.QueryMod) roleMenuQuery {
	mods = append(mods, qm.From("\"role_menus\""))
	return roleMenuQuery{NewQuery(exec, mods...)}
}

// FindRoleMenuG retrieves a single record by ID.
func FindRoleMenuG(messageID int64, selectCols ...string) (*RoleMenu, error) {
	return FindRoleMenu(boil.GetDB(), messageID, selectCols...)
}

// FindRoleMenuGP retrieves a single record by ID, and panics on error.
func FindRoleMenuGP(messageID int64, selectCols ...string) *RoleMenu {
	retobj, err := FindRoleMenu(boil.GetDB(), messageID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRoleMenu retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleMenu(exec boil.Executor, messageID int64, selectCols ...string) (*RoleMenu, error) {
	roleMenuObj := &RoleMenu{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_menus\" where \"message_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, messageID)

	err := q.Bind(roleMenuObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from role_menus")
	}

	return roleMenuObj, nil
}

// FindRoleMenuP retrieves a single record by ID with an executor, and panics on error.
func FindRoleMenuP(exec boil.Executor, messageID int64, selectCols ...string) *RoleMenu {
	retobj, err := FindRoleMenu(exec, messageID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RoleMenu) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *RoleMenu) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *RoleMenu) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *RoleMenu) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no role_menus provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(roleMenuColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	roleMenuInsertCacheMut.RLock()
	cache, cached := roleMenuInsertCache[key]
	roleMenuInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			roleMenuColumns,
			roleMenuColumnsWithDefault,
			roleMenuColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(roleMenuType, roleMenuMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleMenuType, roleMenuMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_menus\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_menus\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_menus")
	}

	if !cached {
		roleMenuInsertCacheMut.Lock()
		roleMenuInsertCache[key] = cache
		roleMenuInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single RoleMenu record. See Update for
// whitelist behavior description.
func (o *RoleMenu) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single RoleMenu record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *RoleMenu) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the RoleMenu, and panics on error.
// See Update for whitelist behavior description.
func (o *RoleMenu) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the RoleMenu.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *RoleMenu) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	roleMenuUpdateCacheMut.RLock()
	cache, cached := roleMenuUpdateCache[key]
	roleMenuUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			roleMenuColumns,
			roleMenuPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update role_menus, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_menus\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roleMenuPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleMenuType, roleMenuMapping, append(wl, roleMenuPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update role_menus row")
	}

	if !cached {
		roleMenuUpdateCacheMut.Lock()
		roleMenuUpdateCache[key] = cache
		roleMenuUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q roleMenuQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q roleMenuQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for role_menus")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoleMenuSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o RoleMenuSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RoleMenuSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleMenuSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_menus\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roleMenuPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in roleMenu slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RoleMenu) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *RoleMenu) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *RoleMenu) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *RoleMenu) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no role_menus provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(roleMenuColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleMenuUpsertCacheMut.RLock()
	cache, cached := roleMenuUpsertCache[key]
	roleMenuUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			roleMenuColumns,
			roleMenuColumnsWithDefault,
			roleMenuColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			roleMenuColumns,
			roleMenuPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert role_menus, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roleMenuPrimaryKeyColumns))
			copy(conflict, roleMenuPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"role_menus\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roleMenuType, roleMenuMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleMenuType, roleMenuMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert role_menus")
	}

	if !cached {
		roleMenuUpsertCacheMut.Lock()
		roleMenuUpsertCache[key] = cache
		roleMenuUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single RoleMenu record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *RoleMenu) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single RoleMenu record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RoleMenu) DeleteG() error {
	if o == nil {
		return errors.New("models: no RoleMenu provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single RoleMenu record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *RoleMenu) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single RoleMenu record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleMenu) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no RoleMenu provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleMenuPrimaryKeyMapping)
	sql := "DELETE FROM \"role_menus\" WHERE \"message_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from role_menus")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q roleMenuQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q roleMenuQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no roleMenuQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from role_menus")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o RoleMenuSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o RoleMenuSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no RoleMenu slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RoleMenuSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleMenuSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no RoleMenu slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_menus\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleMenuPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from roleMenu slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *RoleMenu) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *RoleMenu) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RoleMenu) ReloadG() error {
	if o == nil {
		return errors.New("models: no RoleMenu provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleMenu) Reload(exec boil.Executor) error {
	ret, err := FindRoleMenu(exec, o.MessageID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RoleMenuSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RoleMenuSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleMenuSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty RoleMenuSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleMenuSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	roleMenus := RoleMenuSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_menus\".* FROM \"role_menus\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleMenuPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&roleMenus)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleMenuSlice")
	}

	*o = roleMenus

	return nil
}

// RoleMenuExists checks if the RoleMenu row exists.
func RoleMenuExists(exec boil.Executor, messageID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_menus\" where \"message_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, messageID)
	}

	row := exec.QueryRow(sql, messageID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_menus exists")
	}

	return exists, nil
}

// RoleMenuExistsG checks if the RoleMenu row exists.
func RoleMenuExistsG(messageID int64) (bool, error) {
	return RoleMenuExists(boil.GetDB(), messageID)
}

// RoleMenuExistsGP checks if the RoleMenu row exists. Panics on error.
func RoleMenuExistsGP(messageID int64) bool {
	e, err := RoleMenuExists(boil.GetDB(), messageID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RoleMenuExistsP checks if the RoleMenu row exists. Panics on error.
func RoleMenuExistsP(exec boil.Executor, messageID int64) bool {
	e, err := RoleMenuExists(exec, messageID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
