// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
	"gopkg.in/volatiletech/null.v6"
)

// RoleCommand is an object representing the database table.
type RoleCommand struct {
	ID           int64            `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt    time.Time        `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time        `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	GuildID      int64            `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	Name         string           `boil:"name" json:"name" toml:"name" yaml:"name"`
	RoleGroupID  null.Int64       `boil:"role_group_id" json:"role_group_id,omitempty" toml:"role_group_id" yaml:"role_group_id,omitempty"`
	Role         int64            `boil:"role" json:"role" toml:"role" yaml:"role"`
	RequireRoles types.Int64Array `boil:"require_roles" json:"require_roles,omitempty" toml:"require_roles" yaml:"require_roles,omitempty"`
	IgnoreRoles  types.Int64Array `boil:"ignore_roles" json:"ignore_roles,omitempty" toml:"ignore_roles" yaml:"ignore_roles,omitempty"`
	Position     int64            `boil:"position" json:"position" toml:"position" yaml:"position"`

	R *roleCommandR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleCommandL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleCommandColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	GuildID      string
	Name         string
	RoleGroupID  string
	Role         string
	RequireRoles string
	IgnoreRoles  string
	Position     string
}{
	ID:           "id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	GuildID:      "guild_id",
	Name:         "name",
	RoleGroupID:  "role_group_id",
	Role:         "role",
	RequireRoles: "require_roles",
	IgnoreRoles:  "ignore_roles",
	Position:     "position",
}

// roleCommandR is where relationships are stored.
type roleCommandR struct {
	RoleGroup                *RoleGroup
	RoleMenuOptions          RoleMenuOptionSlice
	NextRoleCommandRoleMenus RoleMenuSlice
}

// roleCommandL is where Load methods for each relationship are stored.
type roleCommandL struct{}

var (
	roleCommandColumns               = []string{"id", "created_at", "updated_at", "guild_id", "name", "role_group_id", "role", "require_roles", "ignore_roles", "position"}
	roleCommandColumnsWithoutDefault = []string{"created_at", "updated_at", "guild_id", "name", "role_group_id", "role", "require_roles", "ignore_roles", "position"}
	roleCommandColumnsWithDefault    = []string{"id"}
	roleCommandPrimaryKeyColumns     = []string{"id"}
)

type (
	// RoleCommandSlice is an alias for a slice of pointers to RoleCommand.
	// This should generally be used opposed to []RoleCommand.
	RoleCommandSlice []*RoleCommand

	roleCommandQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleCommandType                 = reflect.TypeOf(&RoleCommand{})
	roleCommandMapping              = queries.MakeStructMapping(roleCommandType)
	roleCommandPrimaryKeyMapping, _ = queries.BindMapping(roleCommandType, roleCommandMapping, roleCommandPrimaryKeyColumns)
	roleCommandInsertCacheMut       sync.RWMutex
	roleCommandInsertCache          = make(map[string]insertCache)
	roleCommandUpdateCacheMut       sync.RWMutex
	roleCommandUpdateCache          = make(map[string]updateCache)
	roleCommandUpsertCacheMut       sync.RWMutex
	roleCommandUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single roleCommand record from the query, and panics on error.
func (q roleCommandQuery) OneP() *RoleCommand {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single roleCommand record from the query.
func (q roleCommandQuery) One() (*RoleCommand, error) {
	o := &RoleCommand{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_commands")
	}

	return o, nil
}

// AllP returns all RoleCommand records from the query, and panics on error.
func (q roleCommandQuery) AllP() RoleCommandSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all RoleCommand records from the query.
func (q roleCommandQuery) All() (RoleCommandSlice, error) {
	var o []*RoleCommand

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleCommand slice")
	}

	return o, nil
}

// CountP returns the count of all RoleCommand records in the query, and panics on error.
func (q roleCommandQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all RoleCommand records in the query.
func (q roleCommandQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_commands rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q roleCommandQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q roleCommandQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_commands exists")
	}

	return count > 0, nil
}

// RoleGroupG pointed to by the foreign key.
func (o *RoleCommand) RoleGroupG(mods ...qm.QueryMod) roleGroupQuery {
	return o.RoleGroup(boil.GetDB(), mods...)
}

// RoleGroup pointed to by the foreign key.
func (o *RoleCommand) RoleGroup(exec boil.Executor, mods ...qm.QueryMod) roleGroupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RoleGroupID),
	}

	queryMods = append(queryMods, mods...)

	query := RoleGroups(exec, queryMods...)
	queries.SetFrom(query.Query, "\"role_groups\"")

	return query
}

// RoleMenuOptionsG retrieves all the role_menu_option's role menu options.
func (o *RoleCommand) RoleMenuOptionsG(mods ...qm.QueryMod) roleMenuOptionQuery {
	return o.RoleMenuOptions(boil.GetDB(), mods...)
}

// RoleMenuOptions retrieves all the role_menu_option's role menu options with an executor.
func (o *RoleCommand) RoleMenuOptions(exec boil.Executor, mods ...qm.QueryMod) roleMenuOptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_menu_options\".\"role_command_id\"=?", o.ID),
	)

	query := RoleMenuOptions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"role_menu_options\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"role_menu_options\".*"})
	}

	return query
}

// NextRoleCommandRoleMenusG retrieves all the role_menu's role menus via next_role_command_id column.
func (o *RoleCommand) NextRoleCommandRoleMenusG(mods ...qm.QueryMod) roleMenuQuery {
	return o.NextRoleCommandRoleMenus(boil.GetDB(), mods...)
}

// NextRoleCommandRoleMenus retrieves all the role_menu's role menus with an executor via next_role_command_id column.
func (o *RoleCommand) NextRoleCommandRoleMenus(exec boil.Executor, mods ...qm.QueryMod) roleMenuQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_menus\".\"next_role_command_id\"=?", o.ID),
	)

	query := RoleMenus(exec, queryMods...)
	queries.SetFrom(query.Query, "\"role_menus\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"role_menus\".*"})
	}

	return query
}

// LoadRoleGroup allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (roleCommandL) LoadRoleGroup(e boil.Executor, singular bool, maybeRoleCommand interface{}) error {
	var slice []*RoleCommand
	var object *RoleCommand

	count := 1
	if singular {
		object = maybeRoleCommand.(*RoleCommand)
	} else {
		slice = *maybeRoleCommand.(*[]*RoleCommand)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &roleCommandR{}
		}
		args[0] = object.RoleGroupID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &roleCommandR{}
			}
			args[i] = obj.RoleGroupID
		}
	}

	query := fmt.Sprintf(
		"select * from \"role_groups\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RoleGroup")
	}
	defer results.Close()

	var resultSlice []*RoleGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RoleGroup")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.RoleGroup = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleGroupID.Int64 == foreign.ID {
				local.R.RoleGroup = foreign
				break
			}
		}
	}

	return nil
}

// LoadRoleMenuOptions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (roleCommandL) LoadRoleMenuOptions(e boil.Executor, singular bool, maybeRoleCommand interface{}) error {
	var slice []*RoleCommand
	var object *RoleCommand

	count := 1
	if singular {
		object = maybeRoleCommand.(*RoleCommand)
	} else {
		slice = *maybeRoleCommand.(*[]*RoleCommand)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &roleCommandR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &roleCommandR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"role_menu_options\" where \"role_command_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_menu_options")
	}
	defer results.Close()

	var resultSlice []*RoleMenuOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_menu_options")
	}

	if singular {
		object.R.RoleMenuOptions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RoleCommandID.Int64 {
				local.R.RoleMenuOptions = append(local.R.RoleMenuOptions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadNextRoleCommandRoleMenus allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (roleCommandL) LoadNextRoleCommandRoleMenus(e boil.Executor, singular bool, maybeRoleCommand interface{}) error {
	var slice []*RoleCommand
	var object *RoleCommand

	count := 1
	if singular {
		object = maybeRoleCommand.(*RoleCommand)
	} else {
		slice = *maybeRoleCommand.(*[]*RoleCommand)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &roleCommandR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &roleCommandR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"role_menus\" where \"next_role_command_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_menus")
	}
	defer results.Close()

	var resultSlice []*RoleMenu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_menus")
	}

	if singular {
		object.R.NextRoleCommandRoleMenus = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.NextRoleCommandID.Int64 {
				local.R.NextRoleCommandRoleMenus = append(local.R.NextRoleCommandRoleMenus, foreign)
				break
			}
		}
	}

	return nil
}

// SetRoleGroupG of the role_command to the related item.
// Sets o.R.RoleGroup to related.
// Adds o to related.R.RoleCommands.
// Uses the global database handle.
func (o *RoleCommand) SetRoleGroupG(insert bool, related *RoleGroup) error {
	return o.SetRoleGroup(boil.GetDB(), insert, related)
}

// SetRoleGroupP of the role_command to the related item.
// Sets o.R.RoleGroup to related.
// Adds o to related.R.RoleCommands.
// Panics on error.
func (o *RoleCommand) SetRoleGroupP(exec boil.Executor, insert bool, related *RoleGroup) {
	if err := o.SetRoleGroup(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleGroupGP of the role_command to the related item.
// Sets o.R.RoleGroup to related.
// Adds o to related.R.RoleCommands.
// Uses the global database handle and panics on error.
func (o *RoleCommand) SetRoleGroupGP(insert bool, related *RoleGroup) {
	if err := o.SetRoleGroup(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleGroup of the role_command to the related item.
// Sets o.R.RoleGroup to related.
// Adds o to related.R.RoleCommands.
func (o *RoleCommand) SetRoleGroup(exec boil.Executor, insert bool, related *RoleGroup) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_commands\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_group_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleCommandPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleGroupID.Int64 = related.ID
	o.RoleGroupID.Valid = true

	if o.R == nil {
		o.R = &roleCommandR{
			RoleGroup: related,
		}
	} else {
		o.R.RoleGroup = related
	}

	if related.R == nil {
		related.R = &roleGroupR{
			RoleCommands: RoleCommandSlice{o},
		}
	} else {
		related.R.RoleCommands = append(related.R.RoleCommands, o)
	}

	return nil
}

// RemoveRoleGroupG relationship.
// Sets o.R.RoleGroup to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *RoleCommand) RemoveRoleGroupG(related *RoleGroup) error {
	return o.RemoveRoleGroup(boil.GetDB(), related)
}

// RemoveRoleGroupP relationship.
// Sets o.R.RoleGroup to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *RoleCommand) RemoveRoleGroupP(exec boil.Executor, related *RoleGroup) {
	if err := o.RemoveRoleGroup(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoleGroupGP relationship.
// Sets o.R.RoleGroup to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *RoleCommand) RemoveRoleGroupGP(related *RoleGroup) {
	if err := o.RemoveRoleGroup(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoleGroup relationship.
// Sets o.R.RoleGroup to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RoleCommand) RemoveRoleGroup(exec boil.Executor, related *RoleGroup) error {
	var err error

	o.RoleGroupID.Valid = false
	if err = o.Update(exec, "role_group_id"); err != nil {
		o.RoleGroupID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.RoleGroup = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RoleCommands {
		if o.RoleGroupID.Int64 != ri.RoleGroupID.Int64 {
			continue
		}

		ln := len(related.R.RoleCommands)
		if ln > 1 && i < ln-1 {
			related.R.RoleCommands[i] = related.R.RoleCommands[ln-1]
		}
		related.R.RoleCommands = related.R.RoleCommands[:ln-1]
		break
	}
	return nil
}

// AddRoleMenuOptionsG adds the given related objects to the existing relationships
// of the role_command, optionally inserting them as new records.
// Appends related to o.R.RoleMenuOptions.
// Sets related.R.RoleCommand appropriately.
// Uses the global database handle.
func (o *RoleCommand) AddRoleMenuOptionsG(insert bool, related ...*RoleMenuOption) error {
	return o.AddRoleMenuOptions(boil.GetDB(), insert, related...)
}

// AddRoleMenuOptionsP adds the given related objects to the existing relationships
// of the role_command, optionally inserting them as new records.
// Appends related to o.R.RoleMenuOptions.
// Sets related.R.RoleCommand appropriately.
// Panics on error.
func (o *RoleCommand) AddRoleMenuOptionsP(exec boil.Executor, insert bool, related ...*RoleMenuOption) {
	if err := o.AddRoleMenuOptions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRoleMenuOptionsGP adds the given related objects to the existing relationships
// of the role_command, optionally inserting them as new records.
// Appends related to o.R.RoleMenuOptions.
// Sets related.R.RoleCommand appropriately.
// Uses the global database handle and panics on error.
func (o *RoleCommand) AddRoleMenuOptionsGP(insert bool, related ...*RoleMenuOption) {
	if err := o.AddRoleMenuOptions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRoleMenuOptions adds the given related objects to the existing relationships
// of the role_command, optionally inserting them as new records.
// Appends related to o.R.RoleMenuOptions.
// Sets related.R.RoleCommand appropriately.
func (o *RoleCommand) AddRoleMenuOptions(exec boil.Executor, insert bool, related ...*RoleMenuOption) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RoleCommandID.Int64 = o.ID
			rel.RoleCommandID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_menu_options\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"role_command_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleMenuOptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RoleCommandID.Int64 = o.ID
			rel.RoleCommandID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &roleCommandR{
			RoleMenuOptions: related,
		}
	} else {
		o.R.RoleMenuOptions = append(o.R.RoleMenuOptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleMenuOptionR{
				RoleCommand: o,
			}
		} else {
			rel.R.RoleCommand = o
		}
	}
	return nil
}

// SetRoleMenuOptionsG removes all previously related items of the
// role_command replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleCommand's RoleMenuOptions accordingly.
// Replaces o.R.RoleMenuOptions with related.
// Sets related.R.RoleCommand's RoleMenuOptions accordingly.
// Uses the global database handle.
func (o *RoleCommand) SetRoleMenuOptionsG(insert bool, related ...*RoleMenuOption) error {
	return o.SetRoleMenuOptions(boil.GetDB(), insert, related...)
}

// SetRoleMenuOptionsP removes all previously related items of the
// role_command replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleCommand's RoleMenuOptions accordingly.
// Replaces o.R.RoleMenuOptions with related.
// Sets related.R.RoleCommand's RoleMenuOptions accordingly.
// Panics on error.
func (o *RoleCommand) SetRoleMenuOptionsP(exec boil.Executor, insert bool, related ...*RoleMenuOption) {
	if err := o.SetRoleMenuOptions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleMenuOptionsGP removes all previously related items of the
// role_command replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleCommand's RoleMenuOptions accordingly.
// Replaces o.R.RoleMenuOptions with related.
// Sets related.R.RoleCommand's RoleMenuOptions accordingly.
// Uses the global database handle and panics on error.
func (o *RoleCommand) SetRoleMenuOptionsGP(insert bool, related ...*RoleMenuOption) {
	if err := o.SetRoleMenuOptions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleMenuOptions removes all previously related items of the
// role_command replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleCommand's RoleMenuOptions accordingly.
// Replaces o.R.RoleMenuOptions with related.
// Sets related.R.RoleCommand's RoleMenuOptions accordingly.
func (o *RoleCommand) SetRoleMenuOptions(exec boil.Executor, insert bool, related ...*RoleMenuOption) error {
	query := "update \"role_menu_options\" set \"role_command_id\" = null where \"role_command_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoleMenuOptions {
			rel.RoleCommandID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.RoleCommand = nil
		}

		o.R.RoleMenuOptions = nil
	}
	return o.AddRoleMenuOptions(exec, insert, related...)
}

// RemoveRoleMenuOptionsG relationships from objects passed in.
// Removes related items from R.RoleMenuOptions (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleCommand.
// Uses the global database handle.
func (o *RoleCommand) RemoveRoleMenuOptionsG(related ...*RoleMenuOption) error {
	return o.RemoveRoleMenuOptions(boil.GetDB(), related...)
}

// RemoveRoleMenuOptionsP relationships from objects passed in.
// Removes related items from R.RoleMenuOptions (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleCommand.
// Panics on error.
func (o *RoleCommand) RemoveRoleMenuOptionsP(exec boil.Executor, related ...*RoleMenuOption) {
	if err := o.RemoveRoleMenuOptions(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoleMenuOptionsGP relationships from objects passed in.
// Removes related items from R.RoleMenuOptions (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleCommand.
// Uses the global database handle and panics on error.
func (o *RoleCommand) RemoveRoleMenuOptionsGP(related ...*RoleMenuOption) {
	if err := o.RemoveRoleMenuOptions(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoleMenuOptions relationships from objects passed in.
// Removes related items from R.RoleMenuOptions (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleCommand.
func (o *RoleCommand) RemoveRoleMenuOptions(exec boil.Executor, related ...*RoleMenuOption) error {
	var err error
	for _, rel := range related {
		rel.RoleCommandID.Valid = false
		if rel.R != nil {
			rel.R.RoleCommand = nil
		}
		if err = rel.Update(exec, "role_command_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoleMenuOptions {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoleMenuOptions)
			if ln > 1 && i < ln-1 {
				o.R.RoleMenuOptions[i] = o.R.RoleMenuOptions[ln-1]
			}
			o.R.RoleMenuOptions = o.R.RoleMenuOptions[:ln-1]
			break
		}
	}

	return nil
}

// AddNextRoleCommandRoleMenusG adds the given related objects to the existing relationships
// of the role_command, optionally inserting them as new records.
// Appends related to o.R.NextRoleCommandRoleMenus.
// Sets related.R.NextRoleCommand appropriately.
// Uses the global database handle.
func (o *RoleCommand) AddNextRoleCommandRoleMenusG(insert bool, related ...*RoleMenu) error {
	return o.AddNextRoleCommandRoleMenus(boil.GetDB(), insert, related...)
}

// AddNextRoleCommandRoleMenusP adds the given related objects to the existing relationships
// of the role_command, optionally inserting them as new records.
// Appends related to o.R.NextRoleCommandRoleMenus.
// Sets related.R.NextRoleCommand appropriately.
// Panics on error.
func (o *RoleCommand) AddNextRoleCommandRoleMenusP(exec boil.Executor, insert bool, related ...*RoleMenu) {
	if err := o.AddNextRoleCommandRoleMenus(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNextRoleCommandRoleMenusGP adds the given related objects to the existing relationships
// of the role_command, optionally inserting them as new records.
// Appends related to o.R.NextRoleCommandRoleMenus.
// Sets related.R.NextRoleCommand appropriately.
// Uses the global database handle and panics on error.
func (o *RoleCommand) AddNextRoleCommandRoleMenusGP(insert bool, related ...*RoleMenu) {
	if err := o.AddNextRoleCommandRoleMenus(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNextRoleCommandRoleMenus adds the given related objects to the existing relationships
// of the role_command, optionally inserting them as new records.
// Appends related to o.R.NextRoleCommandRoleMenus.
// Sets related.R.NextRoleCommand appropriately.
func (o *RoleCommand) AddNextRoleCommandRoleMenus(exec boil.Executor, insert bool, related ...*RoleMenu) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.NextRoleCommandID.Int64 = o.ID
			rel.NextRoleCommandID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_menus\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"next_role_command_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleMenuPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MessageID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.NextRoleCommandID.Int64 = o.ID
			rel.NextRoleCommandID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &roleCommandR{
			NextRoleCommandRoleMenus: related,
		}
	} else {
		o.R.NextRoleCommandRoleMenus = append(o.R.NextRoleCommandRoleMenus, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleMenuR{
				NextRoleCommand: o,
			}
		} else {
			rel.R.NextRoleCommand = o
		}
	}
	return nil
}

// SetNextRoleCommandRoleMenusG removes all previously related items of the
// role_command replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.NextRoleCommand's NextRoleCommandRoleMenus accordingly.
// Replaces o.R.NextRoleCommandRoleMenus with related.
// Sets related.R.NextRoleCommand's NextRoleCommandRoleMenus accordingly.
// Uses the global database handle.
func (o *RoleCommand) SetNextRoleCommandRoleMenusG(insert bool, related ...*RoleMenu) error {
	return o.SetNextRoleCommandRoleMenus(boil.GetDB(), insert, related...)
}

// SetNextRoleCommandRoleMenusP removes all previously related items of the
// role_command replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.NextRoleCommand's NextRoleCommandRoleMenus accordingly.
// Replaces o.R.NextRoleCommandRoleMenus with related.
// Sets related.R.NextRoleCommand's NextRoleCommandRoleMenus accordingly.
// Panics on error.
func (o *RoleCommand) SetNextRoleCommandRoleMenusP(exec boil.Executor, insert bool, related ...*RoleMenu) {
	if err := o.SetNextRoleCommandRoleMenus(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNextRoleCommandRoleMenusGP removes all previously related items of the
// role_command replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.NextRoleCommand's NextRoleCommandRoleMenus accordingly.
// Replaces o.R.NextRoleCommandRoleMenus with related.
// Sets related.R.NextRoleCommand's NextRoleCommandRoleMenus accordingly.
// Uses the global database handle and panics on error.
func (o *RoleCommand) SetNextRoleCommandRoleMenusGP(insert bool, related ...*RoleMenu) {
	if err := o.SetNextRoleCommandRoleMenus(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNextRoleCommandRoleMenus removes all previously related items of the
// role_command replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.NextRoleCommand's NextRoleCommandRoleMenus accordingly.
// Replaces o.R.NextRoleCommandRoleMenus with related.
// Sets related.R.NextRoleCommand's NextRoleCommandRoleMenus accordingly.
func (o *RoleCommand) SetNextRoleCommandRoleMenus(exec boil.Executor, insert bool, related ...*RoleMenu) error {
	query := "update \"role_menus\" set \"next_role_command_id\" = null where \"next_role_command_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.NextRoleCommandRoleMenus {
			rel.NextRoleCommandID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.NextRoleCommand = nil
		}

		o.R.NextRoleCommandRoleMenus = nil
	}
	return o.AddNextRoleCommandRoleMenus(exec, insert, related...)
}

// RemoveNextRoleCommandRoleMenusG relationships from objects passed in.
// Removes related items from R.NextRoleCommandRoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.NextRoleCommand.
// Uses the global database handle.
func (o *RoleCommand) RemoveNextRoleCommandRoleMenusG(related ...*RoleMenu) error {
	return o.RemoveNextRoleCommandRoleMenus(boil.GetDB(), related...)
}

// RemoveNextRoleCommandRoleMenusP relationships from objects passed in.
// Removes related items from R.NextRoleCommandRoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.NextRoleCommand.
// Panics on error.
func (o *RoleCommand) RemoveNextRoleCommandRoleMenusP(exec boil.Executor, related ...*RoleMenu) {
	if err := o.RemoveNextRoleCommandRoleMenus(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNextRoleCommandRoleMenusGP relationships from objects passed in.
// Removes related items from R.NextRoleCommandRoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.NextRoleCommand.
// Uses the global database handle and panics on error.
func (o *RoleCommand) RemoveNextRoleCommandRoleMenusGP(related ...*RoleMenu) {
	if err := o.RemoveNextRoleCommandRoleMenus(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNextRoleCommandRoleMenus relationships from objects passed in.
// Removes related items from R.NextRoleCommandRoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.NextRoleCommand.
func (o *RoleCommand) RemoveNextRoleCommandRoleMenus(exec boil.Executor, related ...*RoleMenu) error {
	var err error
	for _, rel := range related {
		rel.NextRoleCommandID.Valid = false
		if rel.R != nil {
			rel.R.NextRoleCommand = nil
		}
		if err = rel.Update(exec, "next_role_command_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.NextRoleCommandRoleMenus {
			if rel != ri {
				continue
			}

			ln := len(o.R.NextRoleCommandRoleMenus)
			if ln > 1 && i < ln-1 {
				o.R.NextRoleCommandRoleMenus[i] = o.R.NextRoleCommandRoleMenus[ln-1]
			}
			o.R.NextRoleCommandRoleMenus = o.R.NextRoleCommandRoleMenus[:ln-1]
			break
		}
	}

	return nil
}

// RoleCommandsG retrieves all records.
func RoleCommandsG(mods ...qm.QueryMod) roleCommandQuery {
	return RoleCommands(boil.GetDB(), mods...)
}

// RoleCommands retrieves all the records using an executor.
func RoleCommands(exec boil.Executor, mods ...qm.QueryMod) roleCommandQuery {
	mods = append(mods, qm.From("\"role_commands\""))
	return roleCommandQuery{NewQuery(exec, mods...)}
}

// FindRoleCommandG retrieves a single record by ID.
func FindRoleCommandG(id int64, selectCols ...string) (*RoleCommand, error) {
	return FindRoleCommand(boil.GetDB(), id, selectCols...)
}

// FindRoleCommandGP retrieves a single record by ID, and panics on error.
func FindRoleCommandGP(id int64, selectCols ...string) *RoleCommand {
	retobj, err := FindRoleCommand(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRoleCommand retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleCommand(exec boil.Executor, id int64, selectCols ...string) (*RoleCommand, error) {
	roleCommandObj := &RoleCommand{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_commands\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(roleCommandObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from role_commands")
	}

	return roleCommandObj, nil
}

// FindRoleCommandP retrieves a single record by ID with an executor, and panics on error.
func FindRoleCommandP(exec boil.Executor, id int64, selectCols ...string) *RoleCommand {
	retobj, err := FindRoleCommand(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RoleCommand) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *RoleCommand) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *RoleCommand) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *RoleCommand) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no role_commands provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(roleCommandColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	roleCommandInsertCacheMut.RLock()
	cache, cached := roleCommandInsertCache[key]
	roleCommandInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			roleCommandColumns,
			roleCommandColumnsWithDefault,
			roleCommandColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(roleCommandType, roleCommandMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleCommandType, roleCommandMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_commands\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_commands\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_commands")
	}

	if !cached {
		roleCommandInsertCacheMut.Lock()
		roleCommandInsertCache[key] = cache
		roleCommandInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single RoleCommand record. See Update for
// whitelist behavior description.
func (o *RoleCommand) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single RoleCommand record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *RoleCommand) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the RoleCommand, and panics on error.
// See Update for whitelist behavior description.
func (o *RoleCommand) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the RoleCommand.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *RoleCommand) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(whitelist, nil)
	roleCommandUpdateCacheMut.RLock()
	cache, cached := roleCommandUpdateCache[key]
	roleCommandUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			roleCommandColumns,
			roleCommandPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update role_commands, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_commands\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roleCommandPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleCommandType, roleCommandMapping, append(wl, roleCommandPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update role_commands row")
	}

	if !cached {
		roleCommandUpdateCacheMut.Lock()
		roleCommandUpdateCache[key] = cache
		roleCommandUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q roleCommandQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q roleCommandQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for role_commands")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoleCommandSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o RoleCommandSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RoleCommandSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleCommandSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleCommandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_commands\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roleCommandPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in roleCommand slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RoleCommand) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *RoleCommand) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *RoleCommand) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *RoleCommand) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no role_commands provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(roleCommandColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleCommandUpsertCacheMut.RLock()
	cache, cached := roleCommandUpsertCache[key]
	roleCommandUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			roleCommandColumns,
			roleCommandColumnsWithDefault,
			roleCommandColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			roleCommandColumns,
			roleCommandPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert role_commands, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roleCommandPrimaryKeyColumns))
			copy(conflict, roleCommandPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"role_commands\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roleCommandType, roleCommandMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleCommandType, roleCommandMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert role_commands")
	}

	if !cached {
		roleCommandUpsertCacheMut.Lock()
		roleCommandUpsertCache[key] = cache
		roleCommandUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single RoleCommand record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *RoleCommand) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single RoleCommand record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RoleCommand) DeleteG() error {
	if o == nil {
		return errors.New("models: no RoleCommand provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single RoleCommand record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *RoleCommand) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single RoleCommand record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleCommand) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no RoleCommand provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleCommandPrimaryKeyMapping)
	sql := "DELETE FROM \"role_commands\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from role_commands")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q roleCommandQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q roleCommandQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no roleCommandQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from role_commands")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o RoleCommandSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o RoleCommandSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no RoleCommand slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RoleCommandSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleCommandSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no RoleCommand slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleCommandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_commands\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleCommandPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from roleCommand slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *RoleCommand) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *RoleCommand) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RoleCommand) ReloadG() error {
	if o == nil {
		return errors.New("models: no RoleCommand provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleCommand) Reload(exec boil.Executor) error {
	ret, err := FindRoleCommand(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RoleCommandSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RoleCommandSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleCommandSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty RoleCommandSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleCommandSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	roleCommands := RoleCommandSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleCommandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_commands\".* FROM \"role_commands\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleCommandPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&roleCommands)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleCommandSlice")
	}

	*o = roleCommands

	return nil
}

// RoleCommandExists checks if the RoleCommand row exists.
func RoleCommandExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_commands\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_commands exists")
	}

	return exists, nil
}

// RoleCommandExistsG checks if the RoleCommand row exists.
func RoleCommandExistsG(id int64) (bool, error) {
	return RoleCommandExists(boil.GetDB(), id)
}

// RoleCommandExistsGP checks if the RoleCommand row exists. Panics on error.
func RoleCommandExistsGP(id int64) bool {
	e, err := RoleCommandExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RoleCommandExistsP checks if the RoleCommand row exists. Panics on error.
func RoleCommandExistsP(exec boil.Executor, id int64) bool {
	e, err := RoleCommandExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
