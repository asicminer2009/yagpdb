// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testRoleMenus(t *testing.T) {
	t.Parallel()

	query := RoleMenus(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testRoleMenusDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = roleMenu.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleMenus(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleMenusQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = RoleMenus(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := RoleMenus(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleMenusSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RoleMenuSlice{roleMenu}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleMenus(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testRoleMenusExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := RoleMenuExists(tx, roleMenu.MessageID)
	if err != nil {
		t.Errorf("Unable to check if RoleMenu exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoleMenuExistsG to return true, but got false.")
	}
}
func testRoleMenusFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx); err != nil {
		t.Error(err)
	}

	roleMenuFound, err := FindRoleMenu(tx, roleMenu.MessageID)
	if err != nil {
		t.Error(err)
	}

	if roleMenuFound == nil {
		t.Error("want a record, got nil")
	}
}
func testRoleMenusBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = RoleMenus(tx).Bind(roleMenu); err != nil {
		t.Error(err)
	}
}

func testRoleMenusOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := RoleMenus(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoleMenusAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOne := &RoleMenu{}
	roleMenuTwo := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenuOne, roleMenuDBTypes, false, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}
	if err = randomize.Struct(seed, roleMenuTwo, roleMenuDBTypes, false, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = roleMenuTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := RoleMenus(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoleMenusCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roleMenuOne := &RoleMenu{}
	roleMenuTwo := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenuOne, roleMenuDBTypes, false, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}
	if err = randomize.Struct(seed, roleMenuTwo, roleMenuDBTypes, false, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenuOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = roleMenuTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleMenus(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testRoleMenusInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleMenus(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleMenusInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx, roleMenuColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := RoleMenus(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleMenuToManyRoleMenuOptions(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleMenu
	var b, c RoleMenuOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, roleMenuOptionDBTypes, false, roleMenuOptionColumnsWithDefault...)
	randomize.Struct(seed, &c, roleMenuOptionDBTypes, false, roleMenuOptionColumnsWithDefault...)

	b.RoleMenuID = a.MessageID
	c.RoleMenuID = a.MessageID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	roleMenuOption, err := a.RoleMenuOptions(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range roleMenuOption {
		if v.RoleMenuID == b.RoleMenuID {
			bFound = true
		}
		if v.RoleMenuID == c.RoleMenuID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoleMenuSlice{&a}
	if err = a.L.LoadRoleMenuOptions(tx, false, (*[]*RoleMenu)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleMenuOptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoleMenuOptions = nil
	if err = a.L.LoadRoleMenuOptions(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleMenuOptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", roleMenuOption)
	}
}

func testRoleMenuToManyAddOpRoleMenuOptions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleMenu
	var b, c, d, e RoleMenuOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleMenuOption{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleMenuOptionDBTypes, false, strmangle.SetComplement(roleMenuOptionPrimaryKeyColumns, roleMenuOptionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RoleMenuOption{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoleMenuOptions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.MessageID != first.RoleMenuID {
			t.Error("foreign key was wrong value", a.MessageID, first.RoleMenuID)
		}
		if a.MessageID != second.RoleMenuID {
			t.Error("foreign key was wrong value", a.MessageID, second.RoleMenuID)
		}

		if first.R.RoleMenu != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.RoleMenu != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoleMenuOptions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoleMenuOptions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoleMenuOptions(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRoleMenuToOneRoleCommandUsingNextRoleCommand(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local RoleMenu
	var foreign RoleCommand

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleCommandDBTypes, false, roleCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleCommand struct: %s", err)
	}

	local.NextRoleCommandID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.NextRoleCommandID.Int64 = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.NextRoleCommand(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoleMenuSlice{&local}
	if err = local.L.LoadNextRoleCommand(tx, false, (*[]*RoleMenu)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.NextRoleCommand == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.NextRoleCommand = nil
	if err = local.L.LoadNextRoleCommand(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.NextRoleCommand == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoleMenuToOneRoleGroupUsingRoleGroup(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local RoleMenu
	var foreign RoleGroup

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleGroupDBTypes, false, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	local.RoleGroupID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.RoleGroupID.Int64 = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.RoleGroup(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoleMenuSlice{&local}
	if err = local.L.LoadRoleGroup(tx, false, (*[]*RoleMenu)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.RoleGroup == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RoleGroup = nil
	if err = local.L.LoadRoleGroup(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.RoleGroup == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoleMenuToOneSetOpRoleCommandUsingNextRoleCommand(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleMenu
	var b, c RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RoleCommand{&b, &c} {
		err = a.SetNextRoleCommand(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.NextRoleCommand != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.NextRoleCommandRoleMenus[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.NextRoleCommandID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.NextRoleCommandID.Int64)
		}

		zero := reflect.Zero(reflect.TypeOf(a.NextRoleCommandID.Int64))
		reflect.Indirect(reflect.ValueOf(&a.NextRoleCommandID.Int64)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.NextRoleCommandID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.NextRoleCommandID.Int64, x.ID)
		}
	}
}

func testRoleMenuToOneRemoveOpRoleCommandUsingNextRoleCommand(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleMenu
	var b RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetNextRoleCommand(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveNextRoleCommand(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.NextRoleCommand(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.NextRoleCommand != nil {
		t.Error("R struct entry should be nil")
	}

	if a.NextRoleCommandID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.NextRoleCommandRoleMenus) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRoleMenuToOneSetOpRoleGroupUsingRoleGroup(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleMenu
	var b, c RoleGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RoleGroup{&b, &c} {
		err = a.SetRoleGroup(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RoleGroup != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoleMenus[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RoleGroupID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.RoleGroupID.Int64)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoleGroupID.Int64))
		reflect.Indirect(reflect.ValueOf(&a.RoleGroupID.Int64)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RoleGroupID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.RoleGroupID.Int64, x.ID)
		}
	}
}

func testRoleMenuToOneRemoveOpRoleGroupUsingRoleGroup(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a RoleMenu
	var b RoleGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRoleGroup(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRoleGroup(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.RoleGroup(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.RoleGroup != nil {
		t.Error("R struct entry should be nil")
	}

	if a.RoleGroupID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RoleMenus) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRoleMenusReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = roleMenu.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testRoleMenusReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RoleMenuSlice{roleMenu}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testRoleMenusSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := RoleMenus(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roleMenuDBTypes = map[string]string{`ChannelID`: `bigint`, `DisableSendDM`: `boolean`, `GuildID`: `bigint`, `MessageID`: `bigint`, `NextRoleCommandID`: `bigint`, `OwnMessage`: `boolean`, `OwnerID`: `bigint`, `RemoveRoleOnReactionRemove`: `boolean`, `RoleGroupID`: `bigint`, `State`: `bigint`}
	_               = bytes.MinRead
)

func testRoleMenusUpdate(t *testing.T) {
	t.Parallel()

	if len(roleMenuColumns) == len(roleMenuPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleMenus(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	if err = roleMenu.Update(tx); err != nil {
		t.Error(err)
	}
}

func testRoleMenusSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roleMenuColumns) == len(roleMenuPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	roleMenu := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := RoleMenus(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, roleMenu, roleMenuDBTypes, true, roleMenuPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roleMenuColumns, roleMenuPrimaryKeyColumns) {
		fields = roleMenuColumns
	} else {
		fields = strmangle.SetComplement(
			roleMenuColumns,
			roleMenuPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(roleMenu))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := RoleMenuSlice{roleMenu}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testRoleMenusUpsert(t *testing.T) {
	t.Parallel()

	if len(roleMenuColumns) == len(roleMenuPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	roleMenu := RoleMenu{}
	if err = randomize.Struct(seed, &roleMenu, roleMenuDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = roleMenu.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert RoleMenu: %s", err)
	}

	count, err := RoleMenus(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &roleMenu, roleMenuDBTypes, false, roleMenuPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	if err = roleMenu.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert RoleMenu: %s", err)
	}

	count, err = RoleMenus(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
