// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// RoleMenuOption is an object representing the database table.
type RoleMenuOption struct {
	ID            int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	RoleCommandID null.Int64 `boil:"role_command_id" json:"role_command_id,omitempty" toml:"role_command_id" yaml:"role_command_id,omitempty"`
	EmojiID       int64      `boil:"emoji_id" json:"emoji_id" toml:"emoji_id" yaml:"emoji_id"`
	UnicodeEmoji  string     `boil:"unicode_emoji" json:"unicode_emoji" toml:"unicode_emoji" yaml:"unicode_emoji"`
	RoleMenuID    int64      `boil:"role_menu_id" json:"role_menu_id" toml:"role_menu_id" yaml:"role_menu_id"`

	R *roleMenuOptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleMenuOptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleMenuOptionColumns = struct {
	ID            string
	RoleCommandID string
	EmojiID       string
	UnicodeEmoji  string
	RoleMenuID    string
}{
	ID:            "id",
	RoleCommandID: "role_command_id",
	EmojiID:       "emoji_id",
	UnicodeEmoji:  "unicode_emoji",
	RoleMenuID:    "role_menu_id",
}

// roleMenuOptionR is where relationships are stored.
type roleMenuOptionR struct {
	RoleCommand *RoleCommand
	RoleMenu    *RoleMenu
}

// roleMenuOptionL is where Load methods for each relationship are stored.
type roleMenuOptionL struct{}

var (
	roleMenuOptionColumns               = []string{"id", "role_command_id", "emoji_id", "unicode_emoji", "role_menu_id"}
	roleMenuOptionColumnsWithoutDefault = []string{"role_command_id", "emoji_id", "unicode_emoji", "role_menu_id"}
	roleMenuOptionColumnsWithDefault    = []string{"id"}
	roleMenuOptionPrimaryKeyColumns     = []string{"id"}
)

type (
	// RoleMenuOptionSlice is an alias for a slice of pointers to RoleMenuOption.
	// This should generally be used opposed to []RoleMenuOption.
	RoleMenuOptionSlice []*RoleMenuOption

	roleMenuOptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleMenuOptionType                 = reflect.TypeOf(&RoleMenuOption{})
	roleMenuOptionMapping              = queries.MakeStructMapping(roleMenuOptionType)
	roleMenuOptionPrimaryKeyMapping, _ = queries.BindMapping(roleMenuOptionType, roleMenuOptionMapping, roleMenuOptionPrimaryKeyColumns)
	roleMenuOptionInsertCacheMut       sync.RWMutex
	roleMenuOptionInsertCache          = make(map[string]insertCache)
	roleMenuOptionUpdateCacheMut       sync.RWMutex
	roleMenuOptionUpdateCache          = make(map[string]updateCache)
	roleMenuOptionUpsertCacheMut       sync.RWMutex
	roleMenuOptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single roleMenuOption record from the query, and panics on error.
func (q roleMenuOptionQuery) OneP() *RoleMenuOption {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single roleMenuOption record from the query.
func (q roleMenuOptionQuery) One() (*RoleMenuOption, error) {
	o := &RoleMenuOption{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_menu_options")
	}

	return o, nil
}

// AllP returns all RoleMenuOption records from the query, and panics on error.
func (q roleMenuOptionQuery) AllP() RoleMenuOptionSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all RoleMenuOption records from the query.
func (q roleMenuOptionQuery) All() (RoleMenuOptionSlice, error) {
	var o []*RoleMenuOption

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleMenuOption slice")
	}

	return o, nil
}

// CountP returns the count of all RoleMenuOption records in the query, and panics on error.
func (q roleMenuOptionQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all RoleMenuOption records in the query.
func (q roleMenuOptionQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_menu_options rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q roleMenuOptionQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q roleMenuOptionQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_menu_options exists")
	}

	return count > 0, nil
}

// RoleCommandG pointed to by the foreign key.
func (o *RoleMenuOption) RoleCommandG(mods ...qm.QueryMod) roleCommandQuery {
	return o.RoleCommand(boil.GetDB(), mods...)
}

// RoleCommand pointed to by the foreign key.
func (o *RoleMenuOption) RoleCommand(exec boil.Executor, mods ...qm.QueryMod) roleCommandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RoleCommandID),
	}

	queryMods = append(queryMods, mods...)

	query := RoleCommands(exec, queryMods...)
	queries.SetFrom(query.Query, "\"role_commands\"")

	return query
}

// RoleMenuG pointed to by the foreign key.
func (o *RoleMenuOption) RoleMenuG(mods ...qm.QueryMod) roleMenuQuery {
	return o.RoleMenu(boil.GetDB(), mods...)
}

// RoleMenu pointed to by the foreign key.
func (o *RoleMenuOption) RoleMenu(exec boil.Executor, mods ...qm.QueryMod) roleMenuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("message_id=?", o.RoleMenuID),
	}

	queryMods = append(queryMods, mods...)

	query := RoleMenus(exec, queryMods...)
	queries.SetFrom(query.Query, "\"role_menus\"")

	return query
} // LoadRoleCommand allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (roleMenuOptionL) LoadRoleCommand(e boil.Executor, singular bool, maybeRoleMenuOption interface{}) error {
	var slice []*RoleMenuOption
	var object *RoleMenuOption

	count := 1
	if singular {
		object = maybeRoleMenuOption.(*RoleMenuOption)
	} else {
		slice = *maybeRoleMenuOption.(*[]*RoleMenuOption)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &roleMenuOptionR{}
		}
		args[0] = object.RoleCommandID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMenuOptionR{}
			}
			args[i] = obj.RoleCommandID
		}
	}

	query := fmt.Sprintf(
		"select * from \"role_commands\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RoleCommand")
	}
	defer results.Close()

	var resultSlice []*RoleCommand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RoleCommand")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.RoleCommand = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleCommandID.Int64 == foreign.ID {
				local.R.RoleCommand = foreign
				break
			}
		}
	}

	return nil
}

// LoadRoleMenu allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (roleMenuOptionL) LoadRoleMenu(e boil.Executor, singular bool, maybeRoleMenuOption interface{}) error {
	var slice []*RoleMenuOption
	var object *RoleMenuOption

	count := 1
	if singular {
		object = maybeRoleMenuOption.(*RoleMenuOption)
	} else {
		slice = *maybeRoleMenuOption.(*[]*RoleMenuOption)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &roleMenuOptionR{}
		}
		args[0] = object.RoleMenuID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMenuOptionR{}
			}
			args[i] = obj.RoleMenuID
		}
	}

	query := fmt.Sprintf(
		"select * from \"role_menus\" where \"message_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RoleMenu")
	}
	defer results.Close()

	var resultSlice []*RoleMenu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RoleMenu")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.RoleMenu = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleMenuID == foreign.MessageID {
				local.R.RoleMenu = foreign
				break
			}
		}
	}

	return nil
}

// SetRoleCommandG of the role_menu_option to the related item.
// Sets o.R.RoleCommand to related.
// Adds o to related.R.RoleMenuOptions.
// Uses the global database handle.
func (o *RoleMenuOption) SetRoleCommandG(insert bool, related *RoleCommand) error {
	return o.SetRoleCommand(boil.GetDB(), insert, related)
}

// SetRoleCommandP of the role_menu_option to the related item.
// Sets o.R.RoleCommand to related.
// Adds o to related.R.RoleMenuOptions.
// Panics on error.
func (o *RoleMenuOption) SetRoleCommandP(exec boil.Executor, insert bool, related *RoleCommand) {
	if err := o.SetRoleCommand(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleCommandGP of the role_menu_option to the related item.
// Sets o.R.RoleCommand to related.
// Adds o to related.R.RoleMenuOptions.
// Uses the global database handle and panics on error.
func (o *RoleMenuOption) SetRoleCommandGP(insert bool, related *RoleCommand) {
	if err := o.SetRoleCommand(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleCommand of the role_menu_option to the related item.
// Sets o.R.RoleCommand to related.
// Adds o to related.R.RoleMenuOptions.
func (o *RoleMenuOption) SetRoleCommand(exec boil.Executor, insert bool, related *RoleCommand) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_menu_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_command_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleMenuOptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleCommandID.Int64 = related.ID
	o.RoleCommandID.Valid = true

	if o.R == nil {
		o.R = &roleMenuOptionR{
			RoleCommand: related,
		}
	} else {
		o.R.RoleCommand = related
	}

	if related.R == nil {
		related.R = &roleCommandR{
			RoleMenuOptions: RoleMenuOptionSlice{o},
		}
	} else {
		related.R.RoleMenuOptions = append(related.R.RoleMenuOptions, o)
	}

	return nil
}

// RemoveRoleCommandG relationship.
// Sets o.R.RoleCommand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *RoleMenuOption) RemoveRoleCommandG(related *RoleCommand) error {
	return o.RemoveRoleCommand(boil.GetDB(), related)
}

// RemoveRoleCommandP relationship.
// Sets o.R.RoleCommand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *RoleMenuOption) RemoveRoleCommandP(exec boil.Executor, related *RoleCommand) {
	if err := o.RemoveRoleCommand(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoleCommandGP relationship.
// Sets o.R.RoleCommand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *RoleMenuOption) RemoveRoleCommandGP(related *RoleCommand) {
	if err := o.RemoveRoleCommand(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRoleCommand relationship.
// Sets o.R.RoleCommand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RoleMenuOption) RemoveRoleCommand(exec boil.Executor, related *RoleCommand) error {
	var err error

	o.RoleCommandID.Valid = false
	if err = o.Update(exec, "role_command_id"); err != nil {
		o.RoleCommandID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.RoleCommand = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RoleMenuOptions {
		if o.RoleCommandID.Int64 != ri.RoleCommandID.Int64 {
			continue
		}

		ln := len(related.R.RoleMenuOptions)
		if ln > 1 && i < ln-1 {
			related.R.RoleMenuOptions[i] = related.R.RoleMenuOptions[ln-1]
		}
		related.R.RoleMenuOptions = related.R.RoleMenuOptions[:ln-1]
		break
	}
	return nil
}

// SetRoleMenuG of the role_menu_option to the related item.
// Sets o.R.RoleMenu to related.
// Adds o to related.R.RoleMenuOptions.
// Uses the global database handle.
func (o *RoleMenuOption) SetRoleMenuG(insert bool, related *RoleMenu) error {
	return o.SetRoleMenu(boil.GetDB(), insert, related)
}

// SetRoleMenuP of the role_menu_option to the related item.
// Sets o.R.RoleMenu to related.
// Adds o to related.R.RoleMenuOptions.
// Panics on error.
func (o *RoleMenuOption) SetRoleMenuP(exec boil.Executor, insert bool, related *RoleMenu) {
	if err := o.SetRoleMenu(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleMenuGP of the role_menu_option to the related item.
// Sets o.R.RoleMenu to related.
// Adds o to related.R.RoleMenuOptions.
// Uses the global database handle and panics on error.
func (o *RoleMenuOption) SetRoleMenuGP(insert bool, related *RoleMenu) {
	if err := o.SetRoleMenu(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleMenu of the role_menu_option to the related item.
// Sets o.R.RoleMenu to related.
// Adds o to related.R.RoleMenuOptions.
func (o *RoleMenuOption) SetRoleMenu(exec boil.Executor, insert bool, related *RoleMenu) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_menu_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_menu_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleMenuOptionPrimaryKeyColumns),
	)
	values := []interface{}{related.MessageID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleMenuID = related.MessageID

	if o.R == nil {
		o.R = &roleMenuOptionR{
			RoleMenu: related,
		}
	} else {
		o.R.RoleMenu = related
	}

	if related.R == nil {
		related.R = &roleMenuR{
			RoleMenuOptions: RoleMenuOptionSlice{o},
		}
	} else {
		related.R.RoleMenuOptions = append(related.R.RoleMenuOptions, o)
	}

	return nil
}

// RoleMenuOptionsG retrieves all records.
func RoleMenuOptionsG(mods ...qm.QueryMod) roleMenuOptionQuery {
	return RoleMenuOptions(boil.GetDB(), mods...)
}

// RoleMenuOptions retrieves all the records using an executor.
func RoleMenuOptions(exec boil.Executor, mods ...qm.QueryMod) roleMenuOptionQuery {
	mods = append(mods, qm.From("\"role_menu_options\""))
	return roleMenuOptionQuery{NewQuery(exec, mods...)}
}

// FindRoleMenuOptionG retrieves a single record by ID.
func FindRoleMenuOptionG(id int64, selectCols ...string) (*RoleMenuOption, error) {
	return FindRoleMenuOption(boil.GetDB(), id, selectCols...)
}

// FindRoleMenuOptionGP retrieves a single record by ID, and panics on error.
func FindRoleMenuOptionGP(id int64, selectCols ...string) *RoleMenuOption {
	retobj, err := FindRoleMenuOption(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRoleMenuOption retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleMenuOption(exec boil.Executor, id int64, selectCols ...string) (*RoleMenuOption, error) {
	roleMenuOptionObj := &RoleMenuOption{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_menu_options\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(roleMenuOptionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from role_menu_options")
	}

	return roleMenuOptionObj, nil
}

// FindRoleMenuOptionP retrieves a single record by ID with an executor, and panics on error.
func FindRoleMenuOptionP(exec boil.Executor, id int64, selectCols ...string) *RoleMenuOption {
	retobj, err := FindRoleMenuOption(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RoleMenuOption) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *RoleMenuOption) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *RoleMenuOption) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *RoleMenuOption) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no role_menu_options provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(roleMenuOptionColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	roleMenuOptionInsertCacheMut.RLock()
	cache, cached := roleMenuOptionInsertCache[key]
	roleMenuOptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			roleMenuOptionColumns,
			roleMenuOptionColumnsWithDefault,
			roleMenuOptionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(roleMenuOptionType, roleMenuOptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleMenuOptionType, roleMenuOptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_menu_options\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_menu_options\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_menu_options")
	}

	if !cached {
		roleMenuOptionInsertCacheMut.Lock()
		roleMenuOptionInsertCache[key] = cache
		roleMenuOptionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single RoleMenuOption record. See Update for
// whitelist behavior description.
func (o *RoleMenuOption) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single RoleMenuOption record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *RoleMenuOption) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the RoleMenuOption, and panics on error.
// See Update for whitelist behavior description.
func (o *RoleMenuOption) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the RoleMenuOption.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *RoleMenuOption) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	roleMenuOptionUpdateCacheMut.RLock()
	cache, cached := roleMenuOptionUpdateCache[key]
	roleMenuOptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			roleMenuOptionColumns,
			roleMenuOptionPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update role_menu_options, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_menu_options\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roleMenuOptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleMenuOptionType, roleMenuOptionMapping, append(wl, roleMenuOptionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update role_menu_options row")
	}

	if !cached {
		roleMenuOptionUpdateCacheMut.Lock()
		roleMenuOptionUpdateCache[key] = cache
		roleMenuOptionUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q roleMenuOptionQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q roleMenuOptionQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for role_menu_options")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoleMenuOptionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o RoleMenuOptionSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RoleMenuOptionSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleMenuOptionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_menu_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roleMenuOptionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in roleMenuOption slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RoleMenuOption) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *RoleMenuOption) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *RoleMenuOption) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *RoleMenuOption) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no role_menu_options provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(roleMenuOptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleMenuOptionUpsertCacheMut.RLock()
	cache, cached := roleMenuOptionUpsertCache[key]
	roleMenuOptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			roleMenuOptionColumns,
			roleMenuOptionColumnsWithDefault,
			roleMenuOptionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			roleMenuOptionColumns,
			roleMenuOptionPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert role_menu_options, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roleMenuOptionPrimaryKeyColumns))
			copy(conflict, roleMenuOptionPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"role_menu_options\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roleMenuOptionType, roleMenuOptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleMenuOptionType, roleMenuOptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert role_menu_options")
	}

	if !cached {
		roleMenuOptionUpsertCacheMut.Lock()
		roleMenuOptionUpsertCache[key] = cache
		roleMenuOptionUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single RoleMenuOption record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *RoleMenuOption) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single RoleMenuOption record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RoleMenuOption) DeleteG() error {
	if o == nil {
		return errors.New("models: no RoleMenuOption provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single RoleMenuOption record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *RoleMenuOption) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single RoleMenuOption record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleMenuOption) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no RoleMenuOption provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleMenuOptionPrimaryKeyMapping)
	sql := "DELETE FROM \"role_menu_options\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from role_menu_options")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q roleMenuOptionQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q roleMenuOptionQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no roleMenuOptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from role_menu_options")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o RoleMenuOptionSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o RoleMenuOptionSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no RoleMenuOption slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RoleMenuOptionSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleMenuOptionSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no RoleMenuOption slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_menu_options\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleMenuOptionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from roleMenuOption slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *RoleMenuOption) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *RoleMenuOption) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RoleMenuOption) ReloadG() error {
	if o == nil {
		return errors.New("models: no RoleMenuOption provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleMenuOption) Reload(exec boil.Executor) error {
	ret, err := FindRoleMenuOption(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RoleMenuOptionSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RoleMenuOptionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleMenuOptionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty RoleMenuOptionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleMenuOptionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	roleMenuOptions := RoleMenuOptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_menu_options\".* FROM \"role_menu_options\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleMenuOptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&roleMenuOptions)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleMenuOptionSlice")
	}

	*o = roleMenuOptions

	return nil
}

// RoleMenuOptionExists checks if the RoleMenuOption row exists.
func RoleMenuOptionExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_menu_options\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_menu_options exists")
	}

	return exists, nil
}

// RoleMenuOptionExistsG checks if the RoleMenuOption row exists.
func RoleMenuOptionExistsG(id int64) (bool, error) {
	return RoleMenuOptionExists(boil.GetDB(), id)
}

// RoleMenuOptionExistsGP checks if the RoleMenuOption row exists. Panics on error.
func RoleMenuOptionExistsGP(id int64) bool {
	e, err := RoleMenuOptionExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RoleMenuOptionExistsP checks if the RoleMenuOption row exists. Panics on error.
func RoleMenuOptionExistsP(exec boil.Executor, id int64) bool {
	e, err := RoleMenuOptionExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
