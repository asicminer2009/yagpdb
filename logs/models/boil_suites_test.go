// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigs)
	t.Run("MessageLogs", testMessageLogs)
	t.Run("Messages", testMessages)
	t.Run("NicknameListings", testNicknameListings)
	t.Run("UsernameListings", testUsernameListings)
}

func TestDelete(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsDelete)
	t.Run("MessageLogs", testMessageLogsDelete)
	t.Run("Messages", testMessagesDelete)
	t.Run("NicknameListings", testNicknameListingsDelete)
	t.Run("UsernameListings", testUsernameListingsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsQueryDeleteAll)
	t.Run("MessageLogs", testMessageLogsQueryDeleteAll)
	t.Run("Messages", testMessagesQueryDeleteAll)
	t.Run("NicknameListings", testNicknameListingsQueryDeleteAll)
	t.Run("UsernameListings", testUsernameListingsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsSliceDeleteAll)
	t.Run("MessageLogs", testMessageLogsSliceDeleteAll)
	t.Run("Messages", testMessagesSliceDeleteAll)
	t.Run("NicknameListings", testNicknameListingsSliceDeleteAll)
	t.Run("UsernameListings", testUsernameListingsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsExists)
	t.Run("MessageLogs", testMessageLogsExists)
	t.Run("Messages", testMessagesExists)
	t.Run("NicknameListings", testNicknameListingsExists)
	t.Run("UsernameListings", testUsernameListingsExists)
}

func TestFind(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsFind)
	t.Run("MessageLogs", testMessageLogsFind)
	t.Run("Messages", testMessagesFind)
	t.Run("NicknameListings", testNicknameListingsFind)
	t.Run("UsernameListings", testUsernameListingsFind)
}

func TestBind(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsBind)
	t.Run("MessageLogs", testMessageLogsBind)
	t.Run("Messages", testMessagesBind)
	t.Run("NicknameListings", testNicknameListingsBind)
	t.Run("UsernameListings", testUsernameListingsBind)
}

func TestOne(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsOne)
	t.Run("MessageLogs", testMessageLogsOne)
	t.Run("Messages", testMessagesOne)
	t.Run("NicknameListings", testNicknameListingsOne)
	t.Run("UsernameListings", testUsernameListingsOne)
}

func TestAll(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsAll)
	t.Run("MessageLogs", testMessageLogsAll)
	t.Run("Messages", testMessagesAll)
	t.Run("NicknameListings", testNicknameListingsAll)
	t.Run("UsernameListings", testUsernameListingsAll)
}

func TestCount(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsCount)
	t.Run("MessageLogs", testMessageLogsCount)
	t.Run("Messages", testMessagesCount)
	t.Run("NicknameListings", testNicknameListingsCount)
	t.Run("UsernameListings", testUsernameListingsCount)
}

func TestInsert(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsInsert)
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsInsertWhitelist)
	t.Run("MessageLogs", testMessageLogsInsert)
	t.Run("MessageLogs", testMessageLogsInsertWhitelist)
	t.Run("Messages", testMessagesInsert)
	t.Run("Messages", testMessagesInsertWhitelist)
	t.Run("NicknameListings", testNicknameListingsInsert)
	t.Run("NicknameListings", testNicknameListingsInsertWhitelist)
	t.Run("UsernameListings", testUsernameListingsInsert)
	t.Run("UsernameListings", testUsernameListingsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("MessageToMessageLogUsingMessageLog", testMessageToOneMessageLogUsingMessageLog)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("MessageLogToMessages", testMessageLogToManyMessages)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("MessageToMessageLogUsingMessages", testMessageToOneSetOpMessageLogUsingMessageLog)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("MessageToMessageLogUsingMessages", testMessageToOneRemoveOpMessageLogUsingMessageLog)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("MessageLogToMessages", testMessageLogToManyAddOpMessages)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("MessageLogToMessages", testMessageLogToManySetOpMessages)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("MessageLogToMessages", testMessageLogToManyRemoveOpMessages)
}

func TestReload(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsReload)
	t.Run("MessageLogs", testMessageLogsReload)
	t.Run("Messages", testMessagesReload)
	t.Run("NicknameListings", testNicknameListingsReload)
	t.Run("UsernameListings", testUsernameListingsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsReloadAll)
	t.Run("MessageLogs", testMessageLogsReloadAll)
	t.Run("Messages", testMessagesReloadAll)
	t.Run("NicknameListings", testNicknameListingsReloadAll)
	t.Run("UsernameListings", testUsernameListingsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsSelect)
	t.Run("MessageLogs", testMessageLogsSelect)
	t.Run("Messages", testMessagesSelect)
	t.Run("NicknameListings", testNicknameListingsSelect)
	t.Run("UsernameListings", testUsernameListingsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsUpdate)
	t.Run("MessageLogs", testMessageLogsUpdate)
	t.Run("Messages", testMessagesUpdate)
	t.Run("NicknameListings", testNicknameListingsUpdate)
	t.Run("UsernameListings", testUsernameListingsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("GuildLoggingConfigs", testGuildLoggingConfigsSliceUpdateAll)
	t.Run("MessageLogs", testMessageLogsSliceUpdateAll)
	t.Run("Messages", testMessagesSliceUpdateAll)
	t.Run("NicknameListings", testNicknameListingsSliceUpdateAll)
	t.Run("UsernameListings", testUsernameListingsSliceUpdateAll)
}
