// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// CommandsChannelsOverride is an object representing the database table.
type CommandsChannelsOverride struct {
	ID                      int64            `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildID                 int64            `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	Channels                types.Int64Array `boil:"channels" json:"channels,omitempty" toml:"channels" yaml:"channels,omitempty"`
	ChannelCategories       types.Int64Array `boil:"channel_categories" json:"channel_categories,omitempty" toml:"channel_categories" yaml:"channel_categories,omitempty"`
	Global                  bool             `boil:"global" json:"global" toml:"global" yaml:"global"`
	CommandsEnabled         bool             `boil:"commands_enabled" json:"commands_enabled" toml:"commands_enabled" yaml:"commands_enabled"`
	AutodeleteResponse      bool             `boil:"autodelete_response" json:"autodelete_response" toml:"autodelete_response" yaml:"autodelete_response"`
	AutodeleteTrigger       bool             `boil:"autodelete_trigger" json:"autodelete_trigger" toml:"autodelete_trigger" yaml:"autodelete_trigger"`
	AutodeleteResponseDelay int              `boil:"autodelete_response_delay" json:"autodelete_response_delay" toml:"autodelete_response_delay" yaml:"autodelete_response_delay"`
	AutodeleteTriggerDelay  int              `boil:"autodelete_trigger_delay" json:"autodelete_trigger_delay" toml:"autodelete_trigger_delay" yaml:"autodelete_trigger_delay"`
	RequireRoles            types.Int64Array `boil:"require_roles" json:"require_roles" toml:"require_roles" yaml:"require_roles"`
	IgnoreRoles             types.Int64Array `boil:"ignore_roles" json:"ignore_roles" toml:"ignore_roles" yaml:"ignore_roles"`

	R *commandsChannelsOverrideR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commandsChannelsOverrideL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommandsChannelsOverrideColumns = struct {
	ID                      string
	GuildID                 string
	Channels                string
	ChannelCategories       string
	Global                  string
	CommandsEnabled         string
	AutodeleteResponse      string
	AutodeleteTrigger       string
	AutodeleteResponseDelay string
	AutodeleteTriggerDelay  string
	RequireRoles            string
	IgnoreRoles             string
}{
	ID:                      "id",
	GuildID:                 "guild_id",
	Channels:                "channels",
	ChannelCategories:       "channel_categories",
	Global:                  "global",
	CommandsEnabled:         "commands_enabled",
	AutodeleteResponse:      "autodelete_response",
	AutodeleteTrigger:       "autodelete_trigger",
	AutodeleteResponseDelay: "autodelete_response_delay",
	AutodeleteTriggerDelay:  "autodelete_trigger_delay",
	RequireRoles:            "require_roles",
	IgnoreRoles:             "ignore_roles",
}

// commandsChannelsOverrideR is where relationships are stored.
type commandsChannelsOverrideR struct {
	CommandsCommandOverrides CommandsCommandOverrideSlice
}

// commandsChannelsOverrideL is where Load methods for each relationship are stored.
type commandsChannelsOverrideL struct{}

var (
	commandsChannelsOverrideColumns               = []string{"id", "guild_id", "channels", "channel_categories", "global", "commands_enabled", "autodelete_response", "autodelete_trigger", "autodelete_response_delay", "autodelete_trigger_delay", "require_roles", "ignore_roles"}
	commandsChannelsOverrideColumnsWithoutDefault = []string{"guild_id", "channels", "channel_categories", "global", "commands_enabled", "autodelete_response", "autodelete_trigger", "autodelete_response_delay", "autodelete_trigger_delay", "require_roles", "ignore_roles"}
	commandsChannelsOverrideColumnsWithDefault    = []string{"id"}
	commandsChannelsOverridePrimaryKeyColumns     = []string{"id"}
)

type (
	// CommandsChannelsOverrideSlice is an alias for a slice of pointers to CommandsChannelsOverride.
	// This should generally be used opposed to []CommandsChannelsOverride.
	CommandsChannelsOverrideSlice []*CommandsChannelsOverride

	commandsChannelsOverrideQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commandsChannelsOverrideType                 = reflect.TypeOf(&CommandsChannelsOverride{})
	commandsChannelsOverrideMapping              = queries.MakeStructMapping(commandsChannelsOverrideType)
	commandsChannelsOverridePrimaryKeyMapping, _ = queries.BindMapping(commandsChannelsOverrideType, commandsChannelsOverrideMapping, commandsChannelsOverridePrimaryKeyColumns)
	commandsChannelsOverrideInsertCacheMut       sync.RWMutex
	commandsChannelsOverrideInsertCache          = make(map[string]insertCache)
	commandsChannelsOverrideUpdateCacheMut       sync.RWMutex
	commandsChannelsOverrideUpdateCache          = make(map[string]updateCache)
	commandsChannelsOverrideUpsertCacheMut       sync.RWMutex
	commandsChannelsOverrideUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single commandsChannelsOverride record from the query, and panics on error.
func (q commandsChannelsOverrideQuery) OneP() *CommandsChannelsOverride {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single commandsChannelsOverride record from the query.
func (q commandsChannelsOverrideQuery) One() (*CommandsChannelsOverride, error) {
	o := &CommandsChannelsOverride{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for commands_channels_overrides")
	}

	return o, nil
}

// AllP returns all CommandsChannelsOverride records from the query, and panics on error.
func (q commandsChannelsOverrideQuery) AllP() CommandsChannelsOverrideSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all CommandsChannelsOverride records from the query.
func (q commandsChannelsOverrideQuery) All() (CommandsChannelsOverrideSlice, error) {
	var o []*CommandsChannelsOverride

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CommandsChannelsOverride slice")
	}

	return o, nil
}

// CountP returns the count of all CommandsChannelsOverride records in the query, and panics on error.
func (q commandsChannelsOverrideQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all CommandsChannelsOverride records in the query.
func (q commandsChannelsOverrideQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count commands_channels_overrides rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q commandsChannelsOverrideQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q commandsChannelsOverrideQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if commands_channels_overrides exists")
	}

	return count > 0, nil
}

// CommandsCommandOverridesG retrieves all the commands_command_override's commands command overrides.
func (o *CommandsChannelsOverride) CommandsCommandOverridesG(mods ...qm.QueryMod) commandsCommandOverrideQuery {
	return o.CommandsCommandOverrides(boil.GetDB(), mods...)
}

// CommandsCommandOverrides retrieves all the commands_command_override's commands command overrides with an executor.
func (o *CommandsChannelsOverride) CommandsCommandOverrides(exec boil.Executor, mods ...qm.QueryMod) commandsCommandOverrideQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"commands_command_overrides\".\"commands_channels_overrides_id\"=?", o.ID),
	)

	query := CommandsCommandOverrides(exec, queryMods...)
	queries.SetFrom(query.Query, "\"commands_command_overrides\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"commands_command_overrides\".*"})
	}

	return query
}

// LoadCommandsCommandOverrides allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (commandsChannelsOverrideL) LoadCommandsCommandOverrides(e boil.Executor, singular bool, maybeCommandsChannelsOverride interface{}) error {
	var slice []*CommandsChannelsOverride
	var object *CommandsChannelsOverride

	count := 1
	if singular {
		object = maybeCommandsChannelsOverride.(*CommandsChannelsOverride)
	} else {
		slice = *maybeCommandsChannelsOverride.(*[]*CommandsChannelsOverride)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &commandsChannelsOverrideR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &commandsChannelsOverrideR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"commands_command_overrides\" where \"commands_channels_overrides_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load commands_command_overrides")
	}
	defer results.Close()

	var resultSlice []*CommandsCommandOverride
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice commands_command_overrides")
	}

	if singular {
		object.R.CommandsCommandOverrides = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CommandsChannelsOverridesID {
				local.R.CommandsCommandOverrides = append(local.R.CommandsCommandOverrides, foreign)
				break
			}
		}
	}

	return nil
}

// AddCommandsCommandOverridesG adds the given related objects to the existing relationships
// of the commands_channels_override, optionally inserting them as new records.
// Appends related to o.R.CommandsCommandOverrides.
// Sets related.R.CommandsChannelsOverride appropriately.
// Uses the global database handle.
func (o *CommandsChannelsOverride) AddCommandsCommandOverridesG(insert bool, related ...*CommandsCommandOverride) error {
	return o.AddCommandsCommandOverrides(boil.GetDB(), insert, related...)
}

// AddCommandsCommandOverridesP adds the given related objects to the existing relationships
// of the commands_channels_override, optionally inserting them as new records.
// Appends related to o.R.CommandsCommandOverrides.
// Sets related.R.CommandsChannelsOverride appropriately.
// Panics on error.
func (o *CommandsChannelsOverride) AddCommandsCommandOverridesP(exec boil.Executor, insert bool, related ...*CommandsCommandOverride) {
	if err := o.AddCommandsCommandOverrides(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCommandsCommandOverridesGP adds the given related objects to the existing relationships
// of the commands_channels_override, optionally inserting them as new records.
// Appends related to o.R.CommandsCommandOverrides.
// Sets related.R.CommandsChannelsOverride appropriately.
// Uses the global database handle and panics on error.
func (o *CommandsChannelsOverride) AddCommandsCommandOverridesGP(insert bool, related ...*CommandsCommandOverride) {
	if err := o.AddCommandsCommandOverrides(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCommandsCommandOverrides adds the given related objects to the existing relationships
// of the commands_channels_override, optionally inserting them as new records.
// Appends related to o.R.CommandsCommandOverrides.
// Sets related.R.CommandsChannelsOverride appropriately.
func (o *CommandsChannelsOverride) AddCommandsCommandOverrides(exec boil.Executor, insert bool, related ...*CommandsCommandOverride) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CommandsChannelsOverridesID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"commands_command_overrides\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"commands_channels_overrides_id"}),
				strmangle.WhereClause("\"", "\"", 2, commandsCommandOverridePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CommandsChannelsOverridesID = o.ID
		}
	}

	if o.R == nil {
		o.R = &commandsChannelsOverrideR{
			CommandsCommandOverrides: related,
		}
	} else {
		o.R.CommandsCommandOverrides = append(o.R.CommandsCommandOverrides, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commandsCommandOverrideR{
				CommandsChannelsOverride: o,
			}
		} else {
			rel.R.CommandsChannelsOverride = o
		}
	}
	return nil
}

// CommandsChannelsOverridesG retrieves all records.
func CommandsChannelsOverridesG(mods ...qm.QueryMod) commandsChannelsOverrideQuery {
	return CommandsChannelsOverrides(boil.GetDB(), mods...)
}

// CommandsChannelsOverrides retrieves all the records using an executor.
func CommandsChannelsOverrides(exec boil.Executor, mods ...qm.QueryMod) commandsChannelsOverrideQuery {
	mods = append(mods, qm.From("\"commands_channels_overrides\""))
	return commandsChannelsOverrideQuery{NewQuery(exec, mods...)}
}

// FindCommandsChannelsOverrideG retrieves a single record by ID.
func FindCommandsChannelsOverrideG(id int64, selectCols ...string) (*CommandsChannelsOverride, error) {
	return FindCommandsChannelsOverride(boil.GetDB(), id, selectCols...)
}

// FindCommandsChannelsOverrideGP retrieves a single record by ID, and panics on error.
func FindCommandsChannelsOverrideGP(id int64, selectCols ...string) *CommandsChannelsOverride {
	retobj, err := FindCommandsChannelsOverride(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindCommandsChannelsOverride retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommandsChannelsOverride(exec boil.Executor, id int64, selectCols ...string) (*CommandsChannelsOverride, error) {
	commandsChannelsOverrideObj := &CommandsChannelsOverride{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"commands_channels_overrides\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(commandsChannelsOverrideObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from commands_channels_overrides")
	}

	return commandsChannelsOverrideObj, nil
}

// FindCommandsChannelsOverrideP retrieves a single record by ID with an executor, and panics on error.
func FindCommandsChannelsOverrideP(exec boil.Executor, id int64, selectCols ...string) *CommandsChannelsOverride {
	retobj, err := FindCommandsChannelsOverride(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CommandsChannelsOverride) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *CommandsChannelsOverride) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *CommandsChannelsOverride) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *CommandsChannelsOverride) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no commands_channels_overrides provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(commandsChannelsOverrideColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	commandsChannelsOverrideInsertCacheMut.RLock()
	cache, cached := commandsChannelsOverrideInsertCache[key]
	commandsChannelsOverrideInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			commandsChannelsOverrideColumns,
			commandsChannelsOverrideColumnsWithDefault,
			commandsChannelsOverrideColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(commandsChannelsOverrideType, commandsChannelsOverrideMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commandsChannelsOverrideType, commandsChannelsOverrideMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"commands_channels_overrides\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"commands_channels_overrides\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into commands_channels_overrides")
	}

	if !cached {
		commandsChannelsOverrideInsertCacheMut.Lock()
		commandsChannelsOverrideInsertCache[key] = cache
		commandsChannelsOverrideInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single CommandsChannelsOverride record. See Update for
// whitelist behavior description.
func (o *CommandsChannelsOverride) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single CommandsChannelsOverride record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *CommandsChannelsOverride) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the CommandsChannelsOverride, and panics on error.
// See Update for whitelist behavior description.
func (o *CommandsChannelsOverride) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the CommandsChannelsOverride.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *CommandsChannelsOverride) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	commandsChannelsOverrideUpdateCacheMut.RLock()
	cache, cached := commandsChannelsOverrideUpdateCache[key]
	commandsChannelsOverrideUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			commandsChannelsOverrideColumns,
			commandsChannelsOverridePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update commands_channels_overrides, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"commands_channels_overrides\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, commandsChannelsOverridePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commandsChannelsOverrideType, commandsChannelsOverrideMapping, append(wl, commandsChannelsOverridePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update commands_channels_overrides row")
	}

	if !cached {
		commandsChannelsOverrideUpdateCacheMut.Lock()
		commandsChannelsOverrideUpdateCache[key] = cache
		commandsChannelsOverrideUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q commandsChannelsOverrideQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q commandsChannelsOverrideQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for commands_channels_overrides")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CommandsChannelsOverrideSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o CommandsChannelsOverrideSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o CommandsChannelsOverrideSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommandsChannelsOverrideSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commandsChannelsOverridePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"commands_channels_overrides\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, commandsChannelsOverridePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in commandsChannelsOverride slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CommandsChannelsOverride) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *CommandsChannelsOverride) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *CommandsChannelsOverride) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *CommandsChannelsOverride) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no commands_channels_overrides provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(commandsChannelsOverrideColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commandsChannelsOverrideUpsertCacheMut.RLock()
	cache, cached := commandsChannelsOverrideUpsertCache[key]
	commandsChannelsOverrideUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			commandsChannelsOverrideColumns,
			commandsChannelsOverrideColumnsWithDefault,
			commandsChannelsOverrideColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			commandsChannelsOverrideColumns,
			commandsChannelsOverridePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert commands_channels_overrides, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(commandsChannelsOverridePrimaryKeyColumns))
			copy(conflict, commandsChannelsOverridePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"commands_channels_overrides\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(commandsChannelsOverrideType, commandsChannelsOverrideMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commandsChannelsOverrideType, commandsChannelsOverrideMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert commands_channels_overrides")
	}

	if !cached {
		commandsChannelsOverrideUpsertCacheMut.Lock()
		commandsChannelsOverrideUpsertCache[key] = cache
		commandsChannelsOverrideUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single CommandsChannelsOverride record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CommandsChannelsOverride) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single CommandsChannelsOverride record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CommandsChannelsOverride) DeleteG() error {
	if o == nil {
		return errors.New("models: no CommandsChannelsOverride provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single CommandsChannelsOverride record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CommandsChannelsOverride) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single CommandsChannelsOverride record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommandsChannelsOverride) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no CommandsChannelsOverride provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commandsChannelsOverridePrimaryKeyMapping)
	sql := "DELETE FROM \"commands_channels_overrides\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from commands_channels_overrides")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q commandsChannelsOverrideQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q commandsChannelsOverrideQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no commandsChannelsOverrideQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from commands_channels_overrides")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o CommandsChannelsOverrideSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o CommandsChannelsOverrideSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no CommandsChannelsOverride slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o CommandsChannelsOverrideSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommandsChannelsOverrideSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no CommandsChannelsOverride slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commandsChannelsOverridePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"commands_channels_overrides\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commandsChannelsOverridePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from commandsChannelsOverride slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *CommandsChannelsOverride) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *CommandsChannelsOverride) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CommandsChannelsOverride) ReloadG() error {
	if o == nil {
		return errors.New("models: no CommandsChannelsOverride provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommandsChannelsOverride) Reload(exec boil.Executor) error {
	ret, err := FindCommandsChannelsOverride(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CommandsChannelsOverrideSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CommandsChannelsOverrideSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommandsChannelsOverrideSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty CommandsChannelsOverrideSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommandsChannelsOverrideSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	commandsChannelsOverrides := CommandsChannelsOverrideSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commandsChannelsOverridePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"commands_channels_overrides\".* FROM \"commands_channels_overrides\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commandsChannelsOverridePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&commandsChannelsOverrides)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CommandsChannelsOverrideSlice")
	}

	*o = commandsChannelsOverrides

	return nil
}

// CommandsChannelsOverrideExists checks if the CommandsChannelsOverride row exists.
func CommandsChannelsOverrideExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"commands_channels_overrides\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if commands_channels_overrides exists")
	}

	return exists, nil
}

// CommandsChannelsOverrideExistsG checks if the CommandsChannelsOverride row exists.
func CommandsChannelsOverrideExistsG(id int64) (bool, error) {
	return CommandsChannelsOverrideExists(boil.GetDB(), id)
}

// CommandsChannelsOverrideExistsGP checks if the CommandsChannelsOverride row exists. Panics on error.
func CommandsChannelsOverrideExistsGP(id int64) bool {
	e, err := CommandsChannelsOverrideExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// CommandsChannelsOverrideExistsP checks if the CommandsChannelsOverride row exists. Panics on error.
func CommandsChannelsOverrideExistsP(exec boil.Executor, id int64) bool {
	e, err := CommandsChannelsOverrideExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
