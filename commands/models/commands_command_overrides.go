// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// CommandsCommandOverride is an object representing the database table.
type CommandsCommandOverride struct {
	ID                          int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildID                     int64             `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	CommandsChannelsOverridesID int64             `boil:"commands_channels_overrides_id" json:"commands_channels_overrides_id" toml:"commands_channels_overrides_id" yaml:"commands_channels_overrides_id"`
	Commands                    types.StringArray `boil:"commands" json:"commands" toml:"commands" yaml:"commands"`
	CommandsEnabled             bool              `boil:"commands_enabled" json:"commands_enabled" toml:"commands_enabled" yaml:"commands_enabled"`
	AutodeleteResponse          bool              `boil:"autodelete_response" json:"autodelete_response" toml:"autodelete_response" yaml:"autodelete_response"`
	AutodeleteTrigger           bool              `boil:"autodelete_trigger" json:"autodelete_trigger" toml:"autodelete_trigger" yaml:"autodelete_trigger"`
	AutodeleteResponseDelay     int               `boil:"autodelete_response_delay" json:"autodelete_response_delay" toml:"autodelete_response_delay" yaml:"autodelete_response_delay"`
	AutodeleteTriggerDelay      int               `boil:"autodelete_trigger_delay" json:"autodelete_trigger_delay" toml:"autodelete_trigger_delay" yaml:"autodelete_trigger_delay"`
	RequireRoles                types.Int64Array  `boil:"require_roles" json:"require_roles" toml:"require_roles" yaml:"require_roles"`
	IgnoreRoles                 types.Int64Array  `boil:"ignore_roles" json:"ignore_roles" toml:"ignore_roles" yaml:"ignore_roles"`

	R *commandsCommandOverrideR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commandsCommandOverrideL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommandsCommandOverrideColumns = struct {
	ID                          string
	GuildID                     string
	CommandsChannelsOverridesID string
	Commands                    string
	CommandsEnabled             string
	AutodeleteResponse          string
	AutodeleteTrigger           string
	AutodeleteResponseDelay     string
	AutodeleteTriggerDelay      string
	RequireRoles                string
	IgnoreRoles                 string
}{
	ID:                          "id",
	GuildID:                     "guild_id",
	CommandsChannelsOverridesID: "commands_channels_overrides_id",
	Commands:                    "commands",
	CommandsEnabled:             "commands_enabled",
	AutodeleteResponse:          "autodelete_response",
	AutodeleteTrigger:           "autodelete_trigger",
	AutodeleteResponseDelay:     "autodelete_response_delay",
	AutodeleteTriggerDelay:      "autodelete_trigger_delay",
	RequireRoles:                "require_roles",
	IgnoreRoles:                 "ignore_roles",
}

// commandsCommandOverrideR is where relationships are stored.
type commandsCommandOverrideR struct {
	CommandsChannelsOverride *CommandsChannelsOverride
}

// commandsCommandOverrideL is where Load methods for each relationship are stored.
type commandsCommandOverrideL struct{}

var (
	commandsCommandOverrideColumns               = []string{"id", "guild_id", "commands_channels_overrides_id", "commands", "commands_enabled", "autodelete_response", "autodelete_trigger", "autodelete_response_delay", "autodelete_trigger_delay", "require_roles", "ignore_roles"}
	commandsCommandOverrideColumnsWithoutDefault = []string{"guild_id", "commands_channels_overrides_id", "commands", "commands_enabled", "autodelete_response", "autodelete_trigger", "autodelete_response_delay", "autodelete_trigger_delay", "require_roles", "ignore_roles"}
	commandsCommandOverrideColumnsWithDefault    = []string{"id"}
	commandsCommandOverridePrimaryKeyColumns     = []string{"id"}
)

type (
	// CommandsCommandOverrideSlice is an alias for a slice of pointers to CommandsCommandOverride.
	// This should generally be used opposed to []CommandsCommandOverride.
	CommandsCommandOverrideSlice []*CommandsCommandOverride

	commandsCommandOverrideQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commandsCommandOverrideType                 = reflect.TypeOf(&CommandsCommandOverride{})
	commandsCommandOverrideMapping              = queries.MakeStructMapping(commandsCommandOverrideType)
	commandsCommandOverridePrimaryKeyMapping, _ = queries.BindMapping(commandsCommandOverrideType, commandsCommandOverrideMapping, commandsCommandOverridePrimaryKeyColumns)
	commandsCommandOverrideInsertCacheMut       sync.RWMutex
	commandsCommandOverrideInsertCache          = make(map[string]insertCache)
	commandsCommandOverrideUpdateCacheMut       sync.RWMutex
	commandsCommandOverrideUpdateCache          = make(map[string]updateCache)
	commandsCommandOverrideUpsertCacheMut       sync.RWMutex
	commandsCommandOverrideUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single commandsCommandOverride record from the query, and panics on error.
func (q commandsCommandOverrideQuery) OneP() *CommandsCommandOverride {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single commandsCommandOverride record from the query.
func (q commandsCommandOverrideQuery) One() (*CommandsCommandOverride, error) {
	o := &CommandsCommandOverride{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for commands_command_overrides")
	}

	return o, nil
}

// AllP returns all CommandsCommandOverride records from the query, and panics on error.
func (q commandsCommandOverrideQuery) AllP() CommandsCommandOverrideSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all CommandsCommandOverride records from the query.
func (q commandsCommandOverrideQuery) All() (CommandsCommandOverrideSlice, error) {
	var o []*CommandsCommandOverride

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CommandsCommandOverride slice")
	}

	return o, nil
}

// CountP returns the count of all CommandsCommandOverride records in the query, and panics on error.
func (q commandsCommandOverrideQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all CommandsCommandOverride records in the query.
func (q commandsCommandOverrideQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count commands_command_overrides rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q commandsCommandOverrideQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q commandsCommandOverrideQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if commands_command_overrides exists")
	}

	return count > 0, nil
}

// CommandsChannelsOverrideG pointed to by the foreign key.
func (o *CommandsCommandOverride) CommandsChannelsOverrideG(mods ...qm.QueryMod) commandsChannelsOverrideQuery {
	return o.CommandsChannelsOverride(boil.GetDB(), mods...)
}

// CommandsChannelsOverride pointed to by the foreign key.
func (o *CommandsCommandOverride) CommandsChannelsOverride(exec boil.Executor, mods ...qm.QueryMod) commandsChannelsOverrideQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CommandsChannelsOverridesID),
	}

	queryMods = append(queryMods, mods...)

	query := CommandsChannelsOverrides(exec, queryMods...)
	queries.SetFrom(query.Query, "\"commands_channels_overrides\"")

	return query
} // LoadCommandsChannelsOverride allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (commandsCommandOverrideL) LoadCommandsChannelsOverride(e boil.Executor, singular bool, maybeCommandsCommandOverride interface{}) error {
	var slice []*CommandsCommandOverride
	var object *CommandsCommandOverride

	count := 1
	if singular {
		object = maybeCommandsCommandOverride.(*CommandsCommandOverride)
	} else {
		slice = *maybeCommandsCommandOverride.(*[]*CommandsCommandOverride)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &commandsCommandOverrideR{}
		}
		args[0] = object.CommandsChannelsOverridesID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &commandsCommandOverrideR{}
			}
			args[i] = obj.CommandsChannelsOverridesID
		}
	}

	query := fmt.Sprintf(
		"select * from \"commands_channels_overrides\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CommandsChannelsOverride")
	}
	defer results.Close()

	var resultSlice []*CommandsChannelsOverride
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CommandsChannelsOverride")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.CommandsChannelsOverride = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommandsChannelsOverridesID == foreign.ID {
				local.R.CommandsChannelsOverride = foreign
				break
			}
		}
	}

	return nil
}

// SetCommandsChannelsOverrideG of the commands_command_override to the related item.
// Sets o.R.CommandsChannelsOverride to related.
// Adds o to related.R.CommandsCommandOverrides.
// Uses the global database handle.
func (o *CommandsCommandOverride) SetCommandsChannelsOverrideG(insert bool, related *CommandsChannelsOverride) error {
	return o.SetCommandsChannelsOverride(boil.GetDB(), insert, related)
}

// SetCommandsChannelsOverrideP of the commands_command_override to the related item.
// Sets o.R.CommandsChannelsOverride to related.
// Adds o to related.R.CommandsCommandOverrides.
// Panics on error.
func (o *CommandsCommandOverride) SetCommandsChannelsOverrideP(exec boil.Executor, insert bool, related *CommandsChannelsOverride) {
	if err := o.SetCommandsChannelsOverride(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCommandsChannelsOverrideGP of the commands_command_override to the related item.
// Sets o.R.CommandsChannelsOverride to related.
// Adds o to related.R.CommandsCommandOverrides.
// Uses the global database handle and panics on error.
func (o *CommandsCommandOverride) SetCommandsChannelsOverrideGP(insert bool, related *CommandsChannelsOverride) {
	if err := o.SetCommandsChannelsOverride(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCommandsChannelsOverride of the commands_command_override to the related item.
// Sets o.R.CommandsChannelsOverride to related.
// Adds o to related.R.CommandsCommandOverrides.
func (o *CommandsCommandOverride) SetCommandsChannelsOverride(exec boil.Executor, insert bool, related *CommandsChannelsOverride) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"commands_command_overrides\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"commands_channels_overrides_id"}),
		strmangle.WhereClause("\"", "\"", 2, commandsCommandOverridePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CommandsChannelsOverridesID = related.ID

	if o.R == nil {
		o.R = &commandsCommandOverrideR{
			CommandsChannelsOverride: related,
		}
	} else {
		o.R.CommandsChannelsOverride = related
	}

	if related.R == nil {
		related.R = &commandsChannelsOverrideR{
			CommandsCommandOverrides: CommandsCommandOverrideSlice{o},
		}
	} else {
		related.R.CommandsCommandOverrides = append(related.R.CommandsCommandOverrides, o)
	}

	return nil
}

// CommandsCommandOverridesG retrieves all records.
func CommandsCommandOverridesG(mods ...qm.QueryMod) commandsCommandOverrideQuery {
	return CommandsCommandOverrides(boil.GetDB(), mods...)
}

// CommandsCommandOverrides retrieves all the records using an executor.
func CommandsCommandOverrides(exec boil.Executor, mods ...qm.QueryMod) commandsCommandOverrideQuery {
	mods = append(mods, qm.From("\"commands_command_overrides\""))
	return commandsCommandOverrideQuery{NewQuery(exec, mods...)}
}

// FindCommandsCommandOverrideG retrieves a single record by ID.
func FindCommandsCommandOverrideG(id int64, selectCols ...string) (*CommandsCommandOverride, error) {
	return FindCommandsCommandOverride(boil.GetDB(), id, selectCols...)
}

// FindCommandsCommandOverrideGP retrieves a single record by ID, and panics on error.
func FindCommandsCommandOverrideGP(id int64, selectCols ...string) *CommandsCommandOverride {
	retobj, err := FindCommandsCommandOverride(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindCommandsCommandOverride retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommandsCommandOverride(exec boil.Executor, id int64, selectCols ...string) (*CommandsCommandOverride, error) {
	commandsCommandOverrideObj := &CommandsCommandOverride{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"commands_command_overrides\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(commandsCommandOverrideObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from commands_command_overrides")
	}

	return commandsCommandOverrideObj, nil
}

// FindCommandsCommandOverrideP retrieves a single record by ID with an executor, and panics on error.
func FindCommandsCommandOverrideP(exec boil.Executor, id int64, selectCols ...string) *CommandsCommandOverride {
	retobj, err := FindCommandsCommandOverride(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CommandsCommandOverride) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *CommandsCommandOverride) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *CommandsCommandOverride) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *CommandsCommandOverride) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no commands_command_overrides provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(commandsCommandOverrideColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	commandsCommandOverrideInsertCacheMut.RLock()
	cache, cached := commandsCommandOverrideInsertCache[key]
	commandsCommandOverrideInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			commandsCommandOverrideColumns,
			commandsCommandOverrideColumnsWithDefault,
			commandsCommandOverrideColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(commandsCommandOverrideType, commandsCommandOverrideMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commandsCommandOverrideType, commandsCommandOverrideMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"commands_command_overrides\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"commands_command_overrides\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into commands_command_overrides")
	}

	if !cached {
		commandsCommandOverrideInsertCacheMut.Lock()
		commandsCommandOverrideInsertCache[key] = cache
		commandsCommandOverrideInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single CommandsCommandOverride record. See Update for
// whitelist behavior description.
func (o *CommandsCommandOverride) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single CommandsCommandOverride record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *CommandsCommandOverride) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the CommandsCommandOverride, and panics on error.
// See Update for whitelist behavior description.
func (o *CommandsCommandOverride) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the CommandsCommandOverride.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *CommandsCommandOverride) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	commandsCommandOverrideUpdateCacheMut.RLock()
	cache, cached := commandsCommandOverrideUpdateCache[key]
	commandsCommandOverrideUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			commandsCommandOverrideColumns,
			commandsCommandOverridePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update commands_command_overrides, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"commands_command_overrides\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, commandsCommandOverridePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commandsCommandOverrideType, commandsCommandOverrideMapping, append(wl, commandsCommandOverridePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update commands_command_overrides row")
	}

	if !cached {
		commandsCommandOverrideUpdateCacheMut.Lock()
		commandsCommandOverrideUpdateCache[key] = cache
		commandsCommandOverrideUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q commandsCommandOverrideQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q commandsCommandOverrideQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for commands_command_overrides")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CommandsCommandOverrideSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o CommandsCommandOverrideSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o CommandsCommandOverrideSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommandsCommandOverrideSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commandsCommandOverridePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"commands_command_overrides\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, commandsCommandOverridePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in commandsCommandOverride slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CommandsCommandOverride) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *CommandsCommandOverride) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *CommandsCommandOverride) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *CommandsCommandOverride) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no commands_command_overrides provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(commandsCommandOverrideColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commandsCommandOverrideUpsertCacheMut.RLock()
	cache, cached := commandsCommandOverrideUpsertCache[key]
	commandsCommandOverrideUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			commandsCommandOverrideColumns,
			commandsCommandOverrideColumnsWithDefault,
			commandsCommandOverrideColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			commandsCommandOverrideColumns,
			commandsCommandOverridePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert commands_command_overrides, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(commandsCommandOverridePrimaryKeyColumns))
			copy(conflict, commandsCommandOverridePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"commands_command_overrides\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(commandsCommandOverrideType, commandsCommandOverrideMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commandsCommandOverrideType, commandsCommandOverrideMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert commands_command_overrides")
	}

	if !cached {
		commandsCommandOverrideUpsertCacheMut.Lock()
		commandsCommandOverrideUpsertCache[key] = cache
		commandsCommandOverrideUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single CommandsCommandOverride record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CommandsCommandOverride) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single CommandsCommandOverride record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CommandsCommandOverride) DeleteG() error {
	if o == nil {
		return errors.New("models: no CommandsCommandOverride provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single CommandsCommandOverride record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CommandsCommandOverride) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single CommandsCommandOverride record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommandsCommandOverride) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no CommandsCommandOverride provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commandsCommandOverridePrimaryKeyMapping)
	sql := "DELETE FROM \"commands_command_overrides\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from commands_command_overrides")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q commandsCommandOverrideQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q commandsCommandOverrideQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no commandsCommandOverrideQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from commands_command_overrides")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o CommandsCommandOverrideSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o CommandsCommandOverrideSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no CommandsCommandOverride slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o CommandsCommandOverrideSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommandsCommandOverrideSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no CommandsCommandOverride slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commandsCommandOverridePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"commands_command_overrides\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commandsCommandOverridePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from commandsCommandOverride slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *CommandsCommandOverride) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *CommandsCommandOverride) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CommandsCommandOverride) ReloadG() error {
	if o == nil {
		return errors.New("models: no CommandsCommandOverride provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommandsCommandOverride) Reload(exec boil.Executor) error {
	ret, err := FindCommandsCommandOverride(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CommandsCommandOverrideSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CommandsCommandOverrideSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommandsCommandOverrideSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty CommandsCommandOverrideSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommandsCommandOverrideSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	commandsCommandOverrides := CommandsCommandOverrideSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commandsCommandOverridePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"commands_command_overrides\".* FROM \"commands_command_overrides\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commandsCommandOverridePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&commandsCommandOverrides)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CommandsCommandOverrideSlice")
	}

	*o = commandsCommandOverrides

	return nil
}

// CommandsCommandOverrideExists checks if the CommandsCommandOverride row exists.
func CommandsCommandOverrideExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"commands_command_overrides\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if commands_command_overrides exists")
	}

	return exists, nil
}

// CommandsCommandOverrideExistsG checks if the CommandsCommandOverride row exists.
func CommandsCommandOverrideExistsG(id int64) (bool, error) {
	return CommandsCommandOverrideExists(boil.GetDB(), id)
}

// CommandsCommandOverrideExistsGP checks if the CommandsCommandOverride row exists. Panics on error.
func CommandsCommandOverrideExistsGP(id int64) bool {
	e, err := CommandsCommandOverrideExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// CommandsCommandOverrideExistsP checks if the CommandsCommandOverride row exists. Panics on error.
func CommandsCommandOverrideExistsP(exec boil.Executor, id int64) bool {
	e, err := CommandsCommandOverrideExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
